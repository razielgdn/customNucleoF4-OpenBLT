
openblt_stm32f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002424  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d4  080028d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080028d4  080028d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028dc  080028dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028dc  080028dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080028e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000010  080028f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  080028f4  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be48  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033eb  00000000  00000000  0002becb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000844  00000000  00000000  0002fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024822  00000000  00000000  00030564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e240  00000000  00000000  00054d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6453  00000000  00000000  00062fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001680  00000000  00000000  0013941c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00003864  00000000  00000000  0013aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  0013e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080025d0 	.word	0x080025d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080025d0 	.word	0x080025d0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 8000500:	b508      	push	{r3, lr}
  /* initialize the bootloader */
  BootInit();
 8000502:	f001 fd4d 	bl	8001fa0 <BootInit>
} /*** end of AppInit ***/
 8000506:	bd08      	pop	{r3, pc}

08000508 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 8000508:	b508      	push	{r3, lr}
  /* Run the bootloader task. */
  BootTask();
 800050a:	f001 fd57 	bl	8001fbc <BootTask>
} /*** end of AppTask ***/
 800050e:	bd08      	pop	{r3, pc}

08000510 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8000510:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <CpuUserProgramStartHook+0x18>)
 8000514:	691b      	ldr	r3, [r3, #16]
  /* additional and optional backdoor entry through the pushbutton digital input on the 
   * board. to force the bootloader to stay active after reset, keep it pressed during
   * reset for at least BOOT_BACKDOOR_ENTRY_TIMEOUT_MS.
   */
  if (LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13) == 0)
 8000516:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800051a:	d101      	bne.n	8000520 <CpuUserProgramStartHook+0x10>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 800051c:	2000      	movs	r0, #0
  }
  /* clean up the LED driver */
  LedBlinkExit();
  /*  okay to start the user program.*/
  return BLT_TRUE;
} /*** end of CpuUserProgramStartHook ***/
 800051e:	bd08      	pop	{r3, pc}
  LedBlinkExit();
 8000520:	f000 f83c 	bl	800059c <LedBlinkExit>
  return BLT_TRUE;
 8000524:	2001      	movs	r0, #1
 8000526:	e7fa      	b.n	800051e <CpuUserProgramStartHook+0xe>
 8000528:	40020800 	.word	0x40020800

0800052c <MbRtuDriverOutputControlHook>:
  {
    /* If needed, set DE and NRE pins to low to enable the receiver input. */
    LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
  }
#endif
} /*** end of MbRtuDriverOutputControlHook ***/
 800052c:	4770      	bx	lr

0800052e <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 800052e:	b508      	push	{r3, lr}
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f000 f805 	bl	8000540 <LedBlinkInit>
} /*** end of CopInitHook ***/
 8000536:	bd08      	pop	{r3, pc}

08000538 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8000538:	b508      	push	{r3, lr}
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 800053a:	f000 f807 	bl	800054c <LedBlinkTask>
} /*** end of CopServiceHook ***/
 800053e:	bd08      	pop	{r3, pc}

08000540 <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <LedBlinkInit+0x8>)
 8000542:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2000002c 	.word	0x2000002c

0800054c <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 800054c:	b508      	push	{r3, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 800054e:	f001 fcd9 	bl	8001f04 <TimerGet>
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <LedBlinkTask+0x40>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4298      	cmp	r0, r3
 8000558:	d30f      	bcc.n	800057a <LedBlinkTask+0x2e>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <LedBlinkTask+0x44>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b96b      	cbnz	r3, 800057c <LedBlinkTask+0x30>
    {
      ledOn = BLT_TRUE;
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <LedBlinkTask+0x44>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <LedBlinkTask+0x48>)
 8000568:	2220      	movs	r2, #32
 800056a:	619a      	str	r2, [r3, #24]
    {
      ledOn = BLT_FALSE;
      LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 800056c:	f001 fcca 	bl	8001f04 <TimerGet>
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <LedBlinkTask+0x4c>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	4403      	add	r3, r0
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <LedBlinkTask+0x40>)
 8000578:	6013      	str	r3, [r2, #0]
  }
} /*** end of LedBlinkTask ***/
 800057a:	bd08      	pop	{r3, pc}
      ledOn = BLT_FALSE;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <LedBlinkTask+0x44>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <LedBlinkTask+0x48>)
 8000584:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000588:	619a      	str	r2, [r3, #24]
}
 800058a:	e7ef      	b.n	800056c <LedBlinkTask+0x20>
 800058c:	20000030 	.word	0x20000030
 8000590:	2000002e 	.word	0x2000002e
 8000594:	40020000 	.word	0x40020000
 8000598:	2000002c 	.word	0x2000002c

0800059c <LedBlinkExit>:
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800059c:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <LedBlinkExit+0xc>)
 800059e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005a2:	619a      	str	r2, [r3, #24]
****************************************************************************************/
void LedBlinkExit(void)
{
  /* turn the LED off */
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
} /*** end of LedBlinkExit ***/
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40020000 	.word	0x40020000

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	2400      	movs	r4, #0
 80005b2:	9403      	str	r4, [sp, #12]
 80005b4:	9404      	str	r4, [sp, #16]
 80005b6:	9405      	str	r4, [sp, #20]
 80005b8:	9406      	str	r4, [sp, #24]
 80005ba:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005bc:	9400      	str	r4, [sp, #0]
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_GPIO_Init+0x88>)
 80005c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c2:	f042 0204 	orr.w	r2, r2, #4
 80005c6:	631a      	str	r2, [r3, #48]	; 0x30
 80005c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ca:	f002 0204 	and.w	r2, r2, #4
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	9401      	str	r4, [sp, #4]
 80005d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005da:	631a      	str	r2, [r3, #48]	; 0x30
 80005dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005de:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005e2:	9201      	str	r2, [sp, #4]
 80005e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	9402      	str	r4, [sp, #8]
 80005e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	631a      	str	r2, [r3, #48]	; 0x30
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80005fa:	4d0f      	ldr	r5, [pc, #60]	; (8000638 <MX_GPIO_Init+0x8c>)
 80005fc:	4622      	mov	r2, r4
 80005fe:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000602:	4628      	mov	r0, r5
 8000604:	f000 fd76 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000612:	a903      	add	r1, sp, #12
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <MX_GPIO_Init+0x90>)
 8000616:	f000 fc7d 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 800061a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800061e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	a903      	add	r1, sp, #12
 800062a:	4628      	mov	r0, r5
 800062c:	f000 fc72 	bl	8000f14 <HAL_GPIO_Init>

}
 8000630:	b009      	add	sp, #36	; 0x24
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000
 800063c:	40020800 	.word	0x40020800

08000640 <MX_USART2_UART_Init>:
{
 8000640:	b530      	push	{r4, r5, lr}
 8000642:	b091      	sub	sp, #68	; 0x44
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000644:	2400      	movs	r4, #0
 8000646:	9409      	str	r4, [sp, #36]	; 0x24
 8000648:	940a      	str	r4, [sp, #40]	; 0x28
 800064a:	940b      	str	r4, [sp, #44]	; 0x2c
 800064c:	940c      	str	r4, [sp, #48]	; 0x30
 800064e:	940d      	str	r4, [sp, #52]	; 0x34
 8000650:	940e      	str	r4, [sp, #56]	; 0x38
 8000652:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	9403      	str	r4, [sp, #12]
 8000656:	9404      	str	r4, [sp, #16]
 8000658:	9405      	str	r4, [sp, #20]
 800065a:	9406      	str	r4, [sp, #24]
 800065c:	9407      	str	r4, [sp, #28]
 800065e:	9408      	str	r4, [sp, #32]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_USART2_UART_Init+0xa0>)
 8000662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000664:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000668:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800066a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800066c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000670:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000672:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000676:	f042 0201 	orr.w	r2, r2, #1
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000684:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000686:	250c      	movs	r5, #12
 8000688:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800068a:	2302      	movs	r3, #2
 800068c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000692:	2307      	movs	r3, #7
 8000694:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	eb0d 0105 	add.w	r1, sp, r5
 800069a:	4812      	ldr	r0, [pc, #72]	; (80006e4 <MX_USART2_UART_Init+0xa4>)
 800069c:	f000 fdba 	bl	8001214 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 57600;
 80006a0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80006a4:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80006ac:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 80006ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b2:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80006b4:	950d      	str	r5, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80006b6:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80006b8:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 80006ba:	4c0b      	ldr	r4, [pc, #44]	; (80006e8 <MX_USART2_UART_Init+0xa8>)
 80006bc:	a909      	add	r1, sp, #36	; 0x24
 80006be:	4620      	mov	r0, r4
 80006c0:	f000 ff2e 	bl	8001520 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80006c4:	6923      	ldr	r3, [r4, #16]
 80006c6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80006ca:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80006cc:	6963      	ldr	r3, [r4, #20]
 80006ce:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80006d2:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006d4:	68e3      	ldr	r3, [r4, #12]
 80006d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006da:	60e3      	str	r3, [r4, #12]
}
 80006dc:	b011      	add	sp, #68	; 0x44
 80006de:	bd30      	pop	{r4, r5, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_USART1_UART_Init>:
{
 80006ec:	b510      	push	{r4, lr}
 80006ee:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80006f0:	2400      	movs	r4, #0
 80006f2:	9409      	str	r4, [sp, #36]	; 0x24
 80006f4:	940a      	str	r4, [sp, #40]	; 0x28
 80006f6:	940b      	str	r4, [sp, #44]	; 0x2c
 80006f8:	940c      	str	r4, [sp, #48]	; 0x30
 80006fa:	940d      	str	r4, [sp, #52]	; 0x34
 80006fc:	940e      	str	r4, [sp, #56]	; 0x38
 80006fe:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	9403      	str	r4, [sp, #12]
 8000702:	9404      	str	r4, [sp, #16]
 8000704:	9405      	str	r4, [sp, #20]
 8000706:	9406      	str	r4, [sp, #24]
 8000708:	9407      	str	r4, [sp, #28]
 800070a:	9408      	str	r4, [sp, #32]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_USART1_UART_Init+0xa8>)
 800070e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000710:	f042 0210 	orr.w	r2, r2, #16
 8000714:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000718:	f002 0210 	and.w	r2, r2, #16
 800071c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800071e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000722:	f042 0201 	orr.w	r2, r2, #1
 8000726:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000730:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000732:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000736:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000738:	2302      	movs	r3, #2
 800073a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000740:	2307      	movs	r3, #7
 8000742:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	a903      	add	r1, sp, #12
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <MX_USART1_UART_Init+0xac>)
 8000748:	f000 fd64 	bl	8001214 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 57600;
 800074c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000750:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000758:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 800075a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075e:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000760:	230c      	movs	r3, #12
 8000762:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000764:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000766:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000768:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800076c:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
 8000770:	a909      	add	r1, sp, #36	; 0x24
 8000772:	4620      	mov	r0, r4
 8000774:	f000 fed4 	bl	8001520 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000778:	6923      	ldr	r3, [r4, #16]
 800077a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800077e:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000780:	6963      	ldr	r3, [r4, #20]
 8000782:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000786:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000788:	68e3      	ldr	r3, [r4, #12]
 800078a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800078e:	60e3      	str	r3, [r4, #12]
}
 8000790:	b010      	add	sp, #64	; 0x40
 8000792:	bd10      	pop	{r4, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020000 	.word	0x40020000

0800079c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079e:	e7fe      	b.n	800079e <Error_Handler+0x2>

080007a0 <SystemClock_Config>:
{
 80007a0:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007a2:	4a35      	ldr	r2, [pc, #212]	; (8000878 <SystemClock_Config+0xd8>)
 80007a4:	6813      	ldr	r3, [r2, #0]
 80007a6:	f023 030f 	bic.w	r3, r3, #15
 80007aa:	f043 0305 	orr.w	r3, r3, #5
 80007ae:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007b0:	4b31      	ldr	r3, [pc, #196]	; (8000878 <SystemClock_Config+0xd8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80007b8:	2b05      	cmp	r3, #5
 80007ba:	d1f9      	bne.n	80007b0 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80007bc:	4b2f      	ldr	r3, [pc, #188]	; (800087c <SystemClock_Config+0xdc>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80007c4:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007cc:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80007ce:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80007d8:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007e0:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <SystemClock_Config+0xe0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 80007e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80007ea:	d0fa      	beq.n	80007e2 <SystemClock_Config+0x42>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <SystemClock_Config+0xe0>)
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	4924      	ldr	r1, [pc, #144]	; (8000884 <SystemClock_Config+0xe4>)
 80007f2:	4011      	ands	r1, r2
 80007f4:	4a24      	ldr	r2, [pc, #144]	; (8000888 <SystemClock_Config+0xe8>)
 80007f6:	430a      	orrs	r2, r1
 80007f8:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000800:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8000808:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000810:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <SystemClock_Config+0xe0>)
 8000814:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8000816:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800081a:	d0fa      	beq.n	8000812 <SystemClock_Config+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <SystemClock_Config+0xe0>)
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000824:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000826:	689a      	ldr	r2, [r3, #8]
 8000828:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800082c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000830:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800083c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	f022 0203 	bic.w	r2, r2, #3
 8000844:	f042 0202 	orr.w	r2, r2, #2
 8000848:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <SystemClock_Config+0xe0>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000852:	2b08      	cmp	r3, #8
 8000854:	d1f9      	bne.n	800084a <SystemClock_Config+0xaa>
  LL_SetSystemCoreClock(180000000);
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <SystemClock_Config+0xec>)
 8000858:	f000 ff1e 	bl	8001698 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800085c:	2000      	movs	r0, #0
 800085e:	f000 f8cd 	bl	80009fc <HAL_InitTick>
 8000862:	b938      	cbnz	r0, 8000874 <SystemClock_Config+0xd4>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <SystemClock_Config+0xe0>)
 8000866:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800086a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800086e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000872:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000874:	f7ff ff92 	bl	800079c <Error_Handler>
 8000878:	40023c00 	.word	0x40023c00
 800087c:	40007000 	.word	0x40007000
 8000880:	40023800 	.word	0x40023800
 8000884:	ffbf8000 	.word	0xffbf8000
 8000888:	00402d04 	.word	0x00402d04
 800088c:	0aba9500 	.word	0x0aba9500

08000890 <main>:
{
 8000890:	b508      	push	{r3, lr}
  HAL_Init();
 8000892:	f000 f8d9 	bl	8000a48 <HAL_Init>
  SystemClock_Config();
 8000896:	f7ff ff83 	bl	80007a0 <SystemClock_Config>
  MX_GPIO_Init();
 800089a:	f7ff fe87 	bl	80005ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089e:	f7ff fecf 	bl	8000640 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80008a2:	f7ff ff23 	bl	80006ec <MX_USART1_UART_Init>
  AppInit();
 80008a6:	f7ff fe2b 	bl	8000500 <AppInit>
    AppTask();
 80008aa:	f7ff fe2d 	bl	8000508 <AppTask>
  while (1)
 80008ae:	e7fc      	b.n	80008aa <main+0x1a>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b500      	push	{lr}
 80008b2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b4:	2100      	movs	r1, #0
 80008b6:	9100      	str	r1, [sp, #0]
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x3c>)
 80008ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008c0:	645a      	str	r2, [r3, #68]	; 0x44
 80008c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008c4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008c8:	9200      	str	r2, [sp, #0]
 80008ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	9101      	str	r1, [sp, #4]
 80008ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008d4:	641a      	str	r2, [r3, #64]	; 0x40
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e0:	2007      	movs	r0, #7
 80008e2:	f000 f8d7 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	b003      	add	sp, #12
 80008e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_MspDeInit>:
/* USER CODE BEGIN 1 */
/**
  * De-Initializes the Global MSP.
  */
void HAL_MspDeInit(void)
{
 80008f0:	b510      	push	{r4, lr}
  /* Reset the RCC clock configuration to the default reset state. */
  LL_RCC_DeInit();
 80008f2:	f000 fd33 	bl	800135c <LL_RCC_DeInit>
 80008f6:	4c13      	ldr	r4, [pc, #76]	; (8000944 <HAL_MspDeInit+0x54>)
 80008f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80008fc:	61a3      	str	r3, [r4, #24]
 80008fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000902:	61a3      	str	r3, [r4, #24]

  /* Reset GPIO pin to place the RS485 receiver in reception mode. */
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);

  /* Deinit used GPIOs. */
  LL_GPIO_DeInit(GPIOC);
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <HAL_MspDeInit+0x58>)
 8000906:	f000 fbfb 	bl	8001100 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOA);
 800090a:	4620      	mov	r0, r4
 800090c:	f000 fbf8 	bl	8001100 <LL_GPIO_DeInit>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_MspDeInit+0x5c>)
 8000912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000914:	f022 0210 	bic.w	r2, r2, #16
 8000918:	645a      	str	r2, [r3, #68]	; 0x44
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800091a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000920:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000924:	f022 0204 	bic.w	r2, r2, #4
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
 800092a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800092c:	f022 0201 	bic.w	r2, r2, #1
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000934:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000938:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800093a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800093c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000940:	645a      	str	r2, [r3, #68]	; 0x44

  /* PWR clock disable. */
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
  /* SYSCFG clock disable. */
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
}
 8000942:	bd10      	pop	{r4, pc}
 8000944:	40020000 	.word	0x40020000
 8000948:	40020800 	.word	0x40020800
 800094c:	40023800 	.word	0x40023800

08000950 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler>

08000952 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler>

08000954 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler>

08000956 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler>

08000958 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler>

0800095a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000962:	f000 f88b 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bd08      	pop	{r3, pc}

08000968 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <SystemInit+0x10>)
 800096a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800096e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000972:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a6:	f7ff ffdf 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f001 fded 	bl	8002588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff ff6f 	bl	8000890 <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009c0:	080028e4 	.word	0x080028e4
  ldr r2, =_sbss
 80009c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009c8:	20000698 	.word	0x20000698

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80009d0:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_DeInit+0x28>)
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009d8:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80009da:	2400      	movs	r4, #0
 80009dc:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80009e0:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80009e2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80009e4:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80009e6:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80009e8:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80009ea:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80009ec:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80009ee:	f7ff ff7f 	bl	80008f0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 80009f2:	4620      	mov	r0, r4
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_InitTick+0x40>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <HAL_InitTick+0x44>)
 8000a0e:	6810      	ldr	r0, [r2, #0]
 8000a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a14:	f000 f888 	bl	8000b28 <HAL_SYSTICK_Config>
 8000a18:	b968      	cbnz	r0, 8000a36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	2c0f      	cmp	r4, #15
 8000a1c:	d901      	bls.n	8000a22 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
 8000a20:	e00a      	b.n	8000a38 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	2200      	movs	r2, #0
 8000a24:	4621      	mov	r1, r4
 8000a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a2a:	f000 f845 	bl	8000ab8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_InitTick+0x48>)
 8000a30:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2000      	movs	r0, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a36:	2001      	movs	r0, #1
}
 8000a38:	bd10      	pop	{r4, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000004 	.word	0x20000004
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008

08000a48 <HAL_Init>:
{
 8000a48:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x30>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a52:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a5a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a62:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f815 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffc6 	bl	80009fc <HAL_InitTick>
  HAL_MspInit();
 8000a70:	f7ff ff1e 	bl	80008b0 <HAL_MspInit>
}
 8000a74:	2000      	movs	r0, #0
 8000a76:	bd08      	pop	{r3, pc}
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a7c:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <HAL_IncTick+0x10>)
 8000a7e:	6811      	ldr	r1, [r2, #0]
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_IncTick+0x14>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	440b      	add	r3, r1
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000034 	.word	0x20000034
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a96:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a9c:	041b      	lsls	r3, r3, #16
 8000a9e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	0200      	lsls	r0, r0, #8
 8000aa2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ab0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_NVIC_SetPriority+0x68>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac2:	f1c3 0c07 	rsb	ip, r3, #7
 8000ac6:	f1bc 0f04 	cmp.w	ip, #4
 8000aca:	bf28      	it	cs
 8000acc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad0:	f103 0e04 	add.w	lr, r3, #4
 8000ad4:	f1be 0f06 	cmp.w	lr, #6
 8000ad8:	d918      	bls.n	8000b0c <HAL_NVIC_SetPriority+0x54>
 8000ada:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000ae0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000ae4:	ea21 010c 	bic.w	r1, r1, ip
 8000ae8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aea:	fa0e fe03 	lsl.w	lr, lr, r3
 8000aee:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000af4:	2800      	cmp	r0, #0
 8000af6:	db0b      	blt.n	8000b10 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b04:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b08:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e7e5      	b.n	8000adc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	f000 000f 	and.w	r0, r0, #15
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_NVIC_SetPriority+0x6c>)
 8000b1a:	541a      	strb	r2, [r3, r0]
 8000b1c:	e7f4      	b.n	8000b08 <HAL_NVIC_SetPriority+0x50>
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	e000ed14 	.word	0xe000ed14

08000b28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	3801      	subs	r0, #1
 8000b2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2e:	d20b      	bcs.n	8000b48 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b34:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_SYSTICK_Config+0x24>)
 8000b38:	21f0      	movs	r1, #240	; 0xf0
 8000b3a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3e:	2000      	movs	r0, #0
 8000b40:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	2207      	movs	r2, #7
 8000b44:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b46:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b48:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000b50:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b52:	490a      	ldr	r1, [pc, #40]	; (8000b7c <FLASH_Program_DoubleWord+0x2c>)
 8000b54:	690c      	ldr	r4, [r1, #16]
 8000b56:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000b5a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000b5c:	690c      	ldr	r4, [r1, #16]
 8000b5e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000b62:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000b64:	690c      	ldr	r4, [r1, #16]
 8000b66:	f044 0401 	orr.w	r4, r4, #1
 8000b6a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000b6c:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000b6e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000b72:	6043      	str	r3, [r0, #4]
}
 8000b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <FLASH_Program_Word+0x20>)
 8000b82:	691a      	ldr	r2, [r3, #16]
 8000b84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b88:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000b8a:	691a      	ldr	r2, [r3, #16]
 8000b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b90:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000b92:	691a      	ldr	r2, [r3, #16]
 8000b94:	f042 0201 	orr.w	r2, r2, #1
 8000b98:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000b9a:	6001      	str	r1, [r0, #0]
}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023c00 	.word	0x40023c00

08000ba4 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <FLASH_Program_HalfWord+0x20>)
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000bae:	691a      	ldr	r2, [r3, #16]
 8000bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bb4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	f042 0201 	orr.w	r2, r2, #1
 8000bbc:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000bbe:	8001      	strh	r1, [r0, #0]
}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023c00 	.word	0x40023c00

08000bc8 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <FLASH_Program_Byte+0x1c>)
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bd0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000bd2:	691a      	ldr	r2, [r3, #16]
 8000bd4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	f042 0201 	orr.w	r2, r2, #1
 8000bdc:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8000bde:	7001      	strb	r1, [r0, #0]
}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	f013 0f10 	tst.w	r3, #16
 8000bf0:	d007      	beq.n	8000c02 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000bf2:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <FLASH_SetErrorCode+0xa4>)
 8000bf4:	69d3      	ldr	r3, [r2, #28]
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000bfe:	2210      	movs	r2, #16
 8000c00:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	f013 0f20 	tst.w	r3, #32
 8000c0a:	d007      	beq.n	8000c1c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <FLASH_SetErrorCode+0xa4>)
 8000c0e:	69d3      	ldr	r3, [r2, #28]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c18:	2220      	movs	r2, #32
 8000c1a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000c24:	d007      	beq.n	8000c36 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000c26:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <FLASH_SetErrorCode+0xa4>)
 8000c28:	69d3      	ldr	r3, [r2, #28]
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c32:	2240      	movs	r2, #64	; 0x40
 8000c34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000c3e:	d007      	beq.n	8000c50 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <FLASH_SetErrorCode+0xa4>)
 8000c42:	69d3      	ldr	r3, [r2, #28]
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c58:	d008      	beq.n	8000c6c <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000c5a:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <FLASH_SetErrorCode+0xa4>)
 8000c5c:	69d3      	ldr	r3, [r2, #28]
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	f013 0f02 	tst.w	r3, #2
 8000c74:	d007      	beq.n	8000c86 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <FLASH_SetErrorCode+0xa4>)
 8000c78:	69d3      	ldr	r3, [r2, #28]
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000c80:	4b01      	ldr	r3, [pc, #4]	; (8000c88 <FLASH_SetErrorCode+0xa0>)
 8000c82:	2202      	movs	r2, #2
 8000c84:	60da      	str	r2, [r3, #12]
  }
}
 8000c86:	4770      	bx	lr
 8000c88:	40023c00 	.word	0x40023c00
 8000c8c:	20000038 	.word	0x20000038

08000c90 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_FLASH_Unlock+0x28>)
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db01      	blt.n	8000c9c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8000c98:	2000      	movs	r0, #0
 8000c9a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_FLASH_Unlock+0x28>)
 8000c9e:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_FLASH_Unlock+0x2c>)
 8000ca0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ca2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000ca6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db01      	blt.n	8000cb2 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8000cae:	2000      	movs	r0, #0
 8000cb0:	4770      	bx	lr
      status = HAL_ERROR;
 8000cb2:	2001      	movs	r0, #1
}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00
 8000cbc:	45670123 	.word	0x45670123

08000cc0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000cc0:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <HAL_FLASH_Lock+0x10>)
 8000cc2:	6913      	ldr	r3, [r2, #16]
 8000cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc8:	6113      	str	r3, [r2, #16]
}
 8000cca:	2000      	movs	r0, #0
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <FLASH_WaitForLastOperation>:
{ 
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <FLASH_WaitForLastOperation+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000cde:	f001 f919 	bl	8001f14 <HAL_GetTick>
 8000ce2:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <FLASH_WaitForLastOperation+0x5c>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000cec:	d00a      	beq.n	8000d04 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8000cee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000cf2:	d0f7      	beq.n	8000ce4 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000cf4:	b124      	cbz	r4, 8000d00 <FLASH_WaitForLastOperation+0x2c>
 8000cf6:	f001 f90d 	bl	8001f14 <HAL_GetTick>
 8000cfa:	1b40      	subs	r0, r0, r5
 8000cfc:	42a0      	cmp	r0, r4
 8000cfe:	d9f1      	bls.n	8000ce4 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8000d00:	2003      	movs	r0, #3
 8000d02:	e00d      	b.n	8000d20 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <FLASH_WaitForLastOperation+0x5c>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	f013 0f01 	tst.w	r3, #1
 8000d0c:	d002      	beq.n	8000d14 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <FLASH_WaitForLastOperation+0x5c>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <FLASH_WaitForLastOperation+0x5c>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8000d1c:	d101      	bne.n	8000d22 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8000d1e:	2000      	movs	r0, #0
}  
 8000d20:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8000d22:	f7ff ff61 	bl	8000be8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000d26:	2001      	movs	r0, #1
 8000d28:	e7fa      	b.n	8000d20 <FLASH_WaitForLastOperation+0x4c>
 8000d2a:	bf00      	nop
 8000d2c:	20000038 	.word	0x20000038
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_FLASH_Program>:
{
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8000d38:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <HAL_FLASH_Program+0x74>)
 8000d3a:	7e12      	ldrb	r2, [r2, #24]
 8000d3c:	2a01      	cmp	r2, #1
 8000d3e:	d030      	beq.n	8000da2 <HAL_FLASH_Program+0x6e>
 8000d40:	4604      	mov	r4, r0
 8000d42:	460d      	mov	r5, r1
 8000d44:	461f      	mov	r7, r3
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_FLASH_Program+0x74>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d50:	f7ff ffc0 	bl	8000cd4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000d54:	b990      	cbnz	r0, 8000d7c <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000d56:	b1ac      	cbz	r4, 8000d84 <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d58:	2c01      	cmp	r4, #1
 8000d5a:	d018      	beq.n	8000d8e <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d5c:	2c02      	cmp	r4, #2
 8000d5e:	d01b      	beq.n	8000d98 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8000d60:	4632      	mov	r2, r6
 8000d62:	463b      	mov	r3, r7
 8000d64:	4628      	mov	r0, r5
 8000d66:	f7ff fef3 	bl	8000b50 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d6e:	f7ff ffb1 	bl	8000cd4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_FLASH_Program+0x78>)
 8000d74:	6913      	ldr	r3, [r2, #16]
 8000d76:	f023 0301 	bic.w	r3, r3, #1
 8000d7a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_FLASH_Program+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	761a      	strb	r2, [r3, #24]
}
 8000d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000d84:	b2f1      	uxtb	r1, r6
 8000d86:	4628      	mov	r0, r5
 8000d88:	f7ff ff1e 	bl	8000bc8 <FLASH_Program_Byte>
 8000d8c:	e7ed      	b.n	8000d6a <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000d8e:	b2b1      	uxth	r1, r6
 8000d90:	4628      	mov	r0, r5
 8000d92:	f7ff ff07 	bl	8000ba4 <FLASH_Program_HalfWord>
 8000d96:	e7e8      	b.n	8000d6a <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000d98:	4631      	mov	r1, r6
 8000d9a:	4628      	mov	r0, r5
 8000d9c:	f7ff fef0 	bl	8000b80 <FLASH_Program_Word>
 8000da0:	e7e3      	b.n	8000d6a <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8000da2:	2002      	movs	r0, #2
 8000da4:	e7ed      	b.n	8000d82 <HAL_FLASH_Program+0x4e>
 8000da6:	bf00      	nop
 8000da8:	20000038 	.word	0x20000038
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <FLASH_MassErase+0x20>)
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000db8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	f042 0204 	orr.w	r2, r2, #4
 8000dc0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000dc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dcc:	611a      	str	r2, [r3, #16]
}
 8000dce:	4770      	bx	lr
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000dd4:	2901      	cmp	r1, #1
 8000dd6:	d01b      	beq.n	8000e10 <FLASH_Erase_Sector+0x3c>
 8000dd8:	2902      	cmp	r1, #2
 8000dda:	d01c      	beq.n	8000e16 <FLASH_Erase_Sector+0x42>
 8000ddc:	b109      	cbz	r1, 8000de2 <FLASH_Erase_Sector+0xe>
{
 8000dde:	f44f 7140 	mov.w	r1, #768	; 0x300
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <FLASH_Erase_Sector+0x48>)
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000dea:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000df2:	691a      	ldr	r2, [r3, #16]
 8000df4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000df8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000e00:	f040 0002 	orr.w	r0, r0, #2
 8000e04:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e0c:	611a      	str	r2, [r3, #16]
}
 8000e0e:	4770      	bx	lr
{
 8000e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e14:	e7e5      	b.n	8000de2 <FLASH_Erase_Sector+0xe>
 8000e16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1a:	e7e2      	b.n	8000de2 <FLASH_Erase_Sector+0xe>
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <FLASH_FlushCaches+0x5c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000e28:	d010      	beq.n	8000e4c <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <FLASH_FlushCaches+0x5c>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e32:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e42:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e4a:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <FLASH_FlushCaches+0x5c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000e54:	d010      	beq.n	8000e78 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <FLASH_FlushCaches+0x5c>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e5e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e6e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e76:	601a      	str	r2, [r3, #0]
  }
}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_FLASHEx_Erase>:
{
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_FLASHEx_Erase+0x8c>)
 8000e84:	7e1b      	ldrb	r3, [r3, #24]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d03e      	beq.n	8000f08 <HAL_FLASHEx_Erase+0x88>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	460e      	mov	r6, r1
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HAL_FLASHEx_Erase+0x8c>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e98:	f7ff ff1c 	bl	8000cd4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	bb70      	cbnz	r0, 8000efe <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea4:	6033      	str	r3, [r6, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d016      	beq.n	8000eda <HAL_FLASHEx_Erase+0x5a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000eac:	68a5      	ldr	r5, [r4, #8]
 8000eae:	68e3      	ldr	r3, [r4, #12]
 8000eb0:	68a2      	ldr	r2, [r4, #8]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	42ab      	cmp	r3, r5
 8000eb6:	d920      	bls.n	8000efa <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000eb8:	7c21      	ldrb	r1, [r4, #16]
 8000eba:	4628      	mov	r0, r5
 8000ebc:	f7ff ff8a 	bl	8000dd4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ec0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ec4:	f7ff ff06 	bl	8000cd4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000ec8:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <HAL_FLASHEx_Erase+0x90>)
 8000eca:	6913      	ldr	r3, [r2, #16]
 8000ecc:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000ed0:	6113      	str	r3, [r2, #16]
        if (status != HAL_OK)
 8000ed2:	4607      	mov	r7, r0
 8000ed4:	b980      	cbnz	r0, 8000ef8 <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000ed6:	3501      	adds	r5, #1
 8000ed8:	e7e9      	b.n	8000eae <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000eda:	6861      	ldr	r1, [r4, #4]
 8000edc:	7c20      	ldrb	r0, [r4, #16]
 8000ede:	f7ff ff67 	bl	8000db0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ee2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ee6:	f7ff fef5 	bl	8000cd4 <FLASH_WaitForLastOperation>
 8000eea:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000eec:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_FLASHEx_Erase+0x90>)
 8000eee:	6913      	ldr	r3, [r2, #16]
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6113      	str	r3, [r2, #16]
 8000ef6:	e000      	b.n	8000efa <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8000ef8:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8000efa:	f7ff ff91 	bl	8000e20 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8000efe:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_FLASHEx_Erase+0x8c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	4638      	mov	r0, r7
 8000f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000f08:	2702      	movs	r7, #2
 8000f0a:	e7fb      	b.n	8000f04 <HAL_FLASHEx_Erase+0x84>
 8000f0c:	20000038 	.word	0x20000038
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	f200 80e3 	bhi.w	80010e2 <HAL_GPIO_Init+0x1ce>
{
 8000f1c:	b570      	push	{r4, r5, r6, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	e065      	b.n	8000fee <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f22:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000f28:	2403      	movs	r4, #3
 8000f2a:	fa04 f40e 	lsl.w	r4, r4, lr
 8000f2e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f32:	68cc      	ldr	r4, [r1, #12]
 8000f34:	fa04 f40e 	lsl.w	r4, r4, lr
 8000f38:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000f3a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	684a      	ldr	r2, [r1, #4]
 8000f44:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000f4c:	6042      	str	r2, [r0, #4]
 8000f4e:	e05c      	b.n	800100a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f50:	08dc      	lsrs	r4, r3, #3
 8000f52:	3408      	adds	r4, #8
 8000f54:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f58:	f003 0507 	and.w	r5, r3, #7
 8000f5c:	00ad      	lsls	r5, r5, #2
 8000f5e:	f04f 0e0f 	mov.w	lr, #15
 8000f62:	fa0e fe05 	lsl.w	lr, lr, r5
 8000f66:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6a:	690a      	ldr	r2, [r1, #16]
 8000f6c:	40aa      	lsls	r2, r5
 8000f6e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000f76:	e05c      	b.n	8001032 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f78:	2206      	movs	r2, #6
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x6a>
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f82:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f84:	3402      	adds	r4, #2
 8000f86:	4d57      	ldr	r5, [pc, #348]	; (80010e4 <HAL_GPIO_Init+0x1d0>)
 8000f88:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8c:	4a56      	ldr	r2, [pc, #344]	; (80010e8 <HAL_GPIO_Init+0x1d4>)
 8000f8e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	ea6f 020c 	mvn.w	r2, ip
 8000f94:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f98:	684e      	ldr	r6, [r1, #4]
 8000f9a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000f9e:	d001      	beq.n	8000fa4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000fa0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000fa4:	4c50      	ldr	r4, [pc, #320]	; (80010e8 <HAL_GPIO_Init+0x1d4>)
 8000fa6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000fa8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fae:	684e      	ldr	r6, [r1, #4]
 8000fb0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000fb4:	d001      	beq.n	8000fba <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000fb6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000fba:	4c4b      	ldr	r4, [pc, #300]	; (80010e8 <HAL_GPIO_Init+0x1d4>)
 8000fbc:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000fbe:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc4:	684e      	ldr	r6, [r1, #4]
 8000fc6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000fca:	d001      	beq.n	8000fd0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000fcc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000fd0:	4c45      	ldr	r4, [pc, #276]	; (80010e8 <HAL_GPIO_Init+0x1d4>)
 8000fd2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	684d      	ldr	r5, [r1, #4]
 8000fda:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8000fde:	d001      	beq.n	8000fe4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000fe0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000fe4:	4c40      	ldr	r4, [pc, #256]	; (80010e8 <HAL_GPIO_Init+0x1d4>)
 8000fe6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe8:	3301      	adds	r3, #1
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d877      	bhi.n	80010de <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	680c      	ldr	r4, [r1, #0]
 8000ff4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000ff8:	ea32 0404 	bics.w	r4, r2, r4
 8000ffc:	d1f4      	bne.n	8000fe8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	684c      	ldr	r4, [r1, #4]
 8001000:	f004 0403 	and.w	r4, r4, #3
 8001004:	3c01      	subs	r4, #1
 8001006:	2c01      	cmp	r4, #1
 8001008:	d98b      	bls.n	8000f22 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100a:	684a      	ldr	r2, [r1, #4]
 800100c:	f002 0203 	and.w	r2, r2, #3
 8001010:	2a03      	cmp	r2, #3
 8001012:	d009      	beq.n	8001028 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001014:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001016:	005d      	lsls	r5, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	40aa      	lsls	r2, r5
 800101c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001020:	688a      	ldr	r2, [r1, #8]
 8001022:	40aa      	lsls	r2, r5
 8001024:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001026:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001028:	684a      	ldr	r2, [r1, #4]
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	2a02      	cmp	r2, #2
 8001030:	d08e      	beq.n	8000f50 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001032:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001034:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f20e 	lsl.w	r2, r2, lr
 800103e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001042:	684a      	ldr	r2, [r1, #4]
 8001044:	f002 0203 	and.w	r2, r2, #3
 8001048:	fa02 f20e 	lsl.w	r2, r2, lr
 800104c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800104e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	684a      	ldr	r2, [r1, #4]
 8001052:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001056:	d0c7      	beq.n	8000fe8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001058:	2200      	movs	r2, #0
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_GPIO_Init+0x1d8>)
 800105e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001060:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001064:	6454      	str	r4, [r2, #68]	; 0x44
 8001066:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001068:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001070:	089c      	lsrs	r4, r3, #2
 8001072:	1ca5      	adds	r5, r4, #2
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <HAL_GPIO_Init+0x1d0>)
 8001076:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107a:	f003 0e03 	and.w	lr, r3, #3
 800107e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f20e 	lsl.w	r2, r2, lr
 8001088:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108c:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <HAL_GPIO_Init+0x1dc>)
 800108e:	4290      	cmp	r0, r2
 8001090:	f43f af74 	beq.w	8000f7c <HAL_GPIO_Init+0x68>
 8001094:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001098:	4290      	cmp	r0, r2
 800109a:	d016      	beq.n	80010ca <HAL_GPIO_Init+0x1b6>
 800109c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010a0:	4290      	cmp	r0, r2
 80010a2:	d014      	beq.n	80010ce <HAL_GPIO_Init+0x1ba>
 80010a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010a8:	4290      	cmp	r0, r2
 80010aa:	d012      	beq.n	80010d2 <HAL_GPIO_Init+0x1be>
 80010ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b0:	4290      	cmp	r0, r2
 80010b2:	d010      	beq.n	80010d6 <HAL_GPIO_Init+0x1c2>
 80010b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b8:	4290      	cmp	r0, r2
 80010ba:	d00e      	beq.n	80010da <HAL_GPIO_Init+0x1c6>
 80010bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010c0:	4290      	cmp	r0, r2
 80010c2:	f43f af59 	beq.w	8000f78 <HAL_GPIO_Init+0x64>
 80010c6:	2207      	movs	r2, #7
 80010c8:	e759      	b.n	8000f7e <HAL_GPIO_Init+0x6a>
 80010ca:	2201      	movs	r2, #1
 80010cc:	e757      	b.n	8000f7e <HAL_GPIO_Init+0x6a>
 80010ce:	2202      	movs	r2, #2
 80010d0:	e755      	b.n	8000f7e <HAL_GPIO_Init+0x6a>
 80010d2:	2203      	movs	r2, #3
 80010d4:	e753      	b.n	8000f7e <HAL_GPIO_Init+0x6a>
 80010d6:	2204      	movs	r2, #4
 80010d8:	e751      	b.n	8000f7e <HAL_GPIO_Init+0x6a>
 80010da:	2205      	movs	r2, #5
 80010dc:	e74f      	b.n	8000f7e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80010de:	b002      	add	sp, #8
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
 80010e2:	4770      	bx	lr
 80010e4:	40013800 	.word	0x40013800
 80010e8:	40013c00 	.word	0x40013c00
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000

080010f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f4:	b10a      	cbz	r2, 80010fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	6181      	str	r1, [r0, #24]
 80010f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fa:	0409      	lsls	r1, r1, #16
 80010fc:	6181      	str	r1, [r0, #24]
  }
}
 80010fe:	4770      	bx	lr

08001100 <LL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 8001100:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <LL_GPIO_DeInit+0xf4>)
 8001102:	4298      	cmp	r0, r3
 8001104:	d016      	beq.n	8001134 <LL_GPIO_DeInit+0x34>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
  }
  else if (GPIOx == GPIOB)
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <LL_GPIO_DeInit+0xf8>)
 8001108:	4298      	cmp	r0, r3
 800110a:	d01f      	beq.n	800114c <LL_GPIO_DeInit+0x4c>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
  }
  else if (GPIOx == GPIOC)
 800110c:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <LL_GPIO_DeInit+0xfc>)
 800110e:	4298      	cmp	r0, r3
 8001110:	d028      	beq.n	8001164 <LL_GPIO_DeInit+0x64>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
  }
#if defined(GPIOD)
  else if (GPIOx == GPIOD)
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <LL_GPIO_DeInit+0x100>)
 8001114:	4298      	cmp	r0, r3
 8001116:	d031      	beq.n	800117c <LL_GPIO_DeInit+0x7c>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOD);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOD);
  }
#endif /* GPIOD */
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 8001118:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <LL_GPIO_DeInit+0x104>)
 800111a:	4298      	cmp	r0, r3
 800111c:	d03a      	beq.n	8001194 <LL_GPIO_DeInit+0x94>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
  }
#endif /* GPIOE */
#if defined(GPIOF)
  else if (GPIOx == GPIOF)
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <LL_GPIO_DeInit+0x108>)
 8001120:	4298      	cmp	r0, r3
 8001122:	d043      	beq.n	80011ac <LL_GPIO_DeInit+0xac>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOF);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOF);
  }
#endif /* GPIOF */
#if defined(GPIOG)
  else if (GPIOx == GPIOG)
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <LL_GPIO_DeInit+0x10c>)
 8001126:	4298      	cmp	r0, r3
 8001128:	d04c      	beq.n	80011c4 <LL_GPIO_DeInit+0xc4>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOG);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOG);
  }
#endif /* GPIOG */
#if defined(GPIOH)
  else if (GPIOx == GPIOH)
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <LL_GPIO_DeInit+0x110>)
 800112c:	4298      	cmp	r0, r3
 800112e:	d055      	beq.n	80011dc <LL_GPIO_DeInit+0xdc>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOK);
  }
#endif /* GPIOK */
  else
  {
    status = ERROR;
 8001130:	2001      	movs	r0, #1
  }

  return (status);
}
 8001132:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001134:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	611a      	str	r2, [r3, #16]
  ErrorStatus status = SUCCESS;
 8001148:	2000      	movs	r0, #0
}
 800114a:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 800114c:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	f042 0202 	orr.w	r2, r2, #2
 8001156:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	f022 0202 	bic.w	r2, r2, #2
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	2000      	movs	r0, #0
}
 8001162:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001164:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	f042 0204 	orr.w	r2, r2, #4
 800116e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001170:	691a      	ldr	r2, [r3, #16]
 8001172:	f022 0204 	bic.w	r2, r2, #4
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	2000      	movs	r0, #0
}
 800117a:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 800117c:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	f042 0208 	orr.w	r2, r2, #8
 8001186:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	f022 0208 	bic.w	r2, r2, #8
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	2000      	movs	r0, #0
}
 8001192:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001194:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	f042 0210 	orr.w	r2, r2, #16
 800119e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	f022 0210 	bic.w	r2, r2, #16
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	2000      	movs	r0, #0
}
 80011aa:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 80011ac:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	f022 0220 	bic.w	r2, r2, #32
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	2000      	movs	r0, #0
}
 80011c2:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 80011c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	2000      	movs	r0, #0
}
 80011da:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 80011dc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	2000      	movs	r0, #0
}
 80011f2:	4770      	bx	lr
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40021400 	.word	0x40021400
 800120c:	40021800 	.word	0x40021800
 8001210:	40021c00 	.word	0x40021c00

08001214 <LL_GPIO_Init>:
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001214:	680b      	ldr	r3, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	fab3 fc83 	clz	ip, r3
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800121e:	e053      	b.n	80012c8 <LL_GPIO_Init+0xb4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001220:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001222:	6882      	ldr	r2, [r0, #8]
 8001224:	fa93 f4a3 	rbit	r4, r3
 8001228:	fab4 f484 	clz	r4, r4
 800122c:	0064      	lsls	r4, r4, #1
 800122e:	f04f 0e03 	mov.w	lr, #3
 8001232:	fa0e f404 	lsl.w	r4, lr, r4
 8001236:	ea22 0204 	bic.w	r2, r2, r4
 800123a:	fa93 f4a3 	rbit	r4, r3
 800123e:	fab4 f484 	clz	r4, r4
 8001242:	0064      	lsls	r4, r4, #1
 8001244:	40a5      	lsls	r5, r4
 8001246:	432a      	orrs	r2, r5
 8001248:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800124a:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800124c:	6842      	ldr	r2, [r0, #4]
 800124e:	ea22 0203 	bic.w	r2, r2, r3
 8001252:	fb03 f404 	mul.w	r4, r3, r4
 8001256:	4322      	orrs	r2, r4
 8001258:	6042      	str	r2, [r0, #4]
}
 800125a:	e043      	b.n	80012e4 <LL_GPIO_Init+0xd0>
 800125c:	fa93 f2a3 	rbit	r2, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001260:	fab2 f282 	clz	r2, r2
 8001264:	2a07      	cmp	r2, #7
 8001266:	d814      	bhi.n	8001292 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001268:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800126a:	6a02      	ldr	r2, [r0, #32]
 800126c:	fa93 f4a3 	rbit	r4, r3
 8001270:	fab4 f484 	clz	r4, r4
 8001274:	00a4      	lsls	r4, r4, #2
 8001276:	260f      	movs	r6, #15
 8001278:	fa06 f404 	lsl.w	r4, r6, r4
 800127c:	ea22 0204 	bic.w	r2, r2, r4
 8001280:	fa93 f4a3 	rbit	r4, r3
 8001284:	fab4 f484 	clz	r4, r4
 8001288:	00a4      	lsls	r4, r4, #2
 800128a:	40a5      	lsls	r5, r4
 800128c:	432a      	orrs	r2, r5
 800128e:	6202      	str	r2, [r0, #32]
}
 8001290:	e040      	b.n	8001314 <LL_GPIO_Init+0x100>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001292:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001294:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001296:	0a1a      	lsrs	r2, r3, #8
 8001298:	fa92 fea2 	rbit	lr, r2
 800129c:	fabe fe8e 	clz	lr, lr
 80012a0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80012a4:	260f      	movs	r6, #15
 80012a6:	fa06 fe0e 	lsl.w	lr, r6, lr
 80012aa:	ea25 050e 	bic.w	r5, r5, lr
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	fab2 f282 	clz	r2, r2
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4094      	lsls	r4, r2
 80012ba:	432c      	orrs	r4, r5
 80012bc:	6244      	str	r4, [r0, #36]	; 0x24
}
 80012be:	e029      	b.n	8001314 <LL_GPIO_Init+0x100>
    }
    pinpos++;
  }

  return (SUCCESS);
}
 80012c0:	2000      	movs	r0, #0
 80012c2:	bd70      	pop	{r4, r5, r6, pc}
    pinpos++;
 80012c4:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80012c8:	680b      	ldr	r3, [r1, #0]
 80012ca:	fa33 f20c 	lsrs.w	r2, r3, ip
 80012ce:	d043      	beq.n	8001358 <LL_GPIO_Init+0x144>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80012d0:	2201      	movs	r2, #1
 80012d2:	fa02 f20c 	lsl.w	r2, r2, ip
    if (currentpin)
 80012d6:	4013      	ands	r3, r2
 80012d8:	d0f4      	beq.n	80012c4 <LL_GPIO_Init+0xb0>
{
 80012da:	b570      	push	{r4, r5, r6, lr}
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012dc:	684a      	ldr	r2, [r1, #4]
 80012de:	3a01      	subs	r2, #1
 80012e0:	2a01      	cmp	r2, #1
 80012e2:	d99d      	bls.n	8001220 <LL_GPIO_Init+0xc>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012e4:	68c2      	ldr	r2, [r0, #12]
 80012e6:	fa93 f4a3 	rbit	r4, r3
 80012ea:	fab4 f484 	clz	r4, r4
 80012ee:	0064      	lsls	r4, r4, #1
 80012f0:	2503      	movs	r5, #3
 80012f2:	fa05 f404 	lsl.w	r4, r5, r4
 80012f6:	ea22 0204 	bic.w	r2, r2, r4
 80012fa:	fa93 f4a3 	rbit	r4, r3
 80012fe:	fab4 f484 	clz	r4, r4
 8001302:	0064      	lsls	r4, r4, #1
 8001304:	690d      	ldr	r5, [r1, #16]
 8001306:	fa05 f404 	lsl.w	r4, r5, r4
 800130a:	4322      	orrs	r2, r4
 800130c:	60c2      	str	r2, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800130e:	684a      	ldr	r2, [r1, #4]
 8001310:	2a02      	cmp	r2, #2
 8001312:	d0a3      	beq.n	800125c <LL_GPIO_Init+0x48>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001314:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001316:	6804      	ldr	r4, [r0, #0]
 8001318:	fa93 fea3 	rbit	lr, r3
 800131c:	fabe fe8e 	clz	lr, lr
 8001320:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8001324:	2503      	movs	r5, #3
 8001326:	fa05 fe0e 	lsl.w	lr, r5, lr
 800132a:	ea24 0e0e 	bic.w	lr, r4, lr
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	409a      	lsls	r2, r3
 800133a:	ea4e 0202 	orr.w	r2, lr, r2
 800133e:	6002      	str	r2, [r0, #0]
    pinpos++;
 8001340:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001344:	680b      	ldr	r3, [r1, #0]
 8001346:	fa33 f20c 	lsrs.w	r2, r3, ip
 800134a:	d0b9      	beq.n	80012c0 <LL_GPIO_Init+0xac>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800134c:	2201      	movs	r2, #1
 800134e:	fa02 f20c 	lsl.w	r2, r2, ip
    if (currentpin)
 8001352:	4013      	ands	r3, r2
 8001354:	d0f4      	beq.n	8001340 <LL_GPIO_Init+0x12c>
 8001356:	e7c1      	b.n	80012dc <LL_GPIO_Init+0xc8>
}
 8001358:	2000      	movs	r0, #0
 800135a:	4770      	bx	lr

0800135c <LL_RCC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RCC registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_RCC_DeInit(void)
{
 800135c:	b082      	sub	sp, #8
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800135e:	4a2b      	ldr	r2, [pc, #172]	; (800140c <LL_RCC_DeInit+0xb0>)
 8001360:	6813      	ldr	r3, [r2, #0]
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <LL_RCC_DeInit+0xb0>)
 800136a:	681b      	ldr	r3, [r3, #0]

  /* Set HSION bit */
  LL_RCC_HSI_Enable();

  /* Wait for HSI READY bit */
  while(LL_RCC_HSI_IsReady() != 1U)
 800136c:	f013 0f02 	tst.w	r3, #2
 8001370:	d0fa      	beq.n	8001368 <LL_RCC_DeInit+0xc>
  {}

  /* Reset CFGR register */
  LL_RCC_WriteReg(CFGR, 0x00000000U);
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <LL_RCC_DeInit+0xb0>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]

  /* Read CR register */
  vl_mask = LL_RCC_ReadReg(CR);
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	9201      	str	r2, [sp, #4]

  /* Reset HSEON, HSEBYP, PLLON, CSSON bits */
  CLEAR_BIT(vl_mask,
 800137c:	9a01      	ldr	r2, [sp, #4]
 800137e:	f022 7286 	bic.w	r2, r2, #17563648	; 0x10c0000
 8001382:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001386:	9201      	str	r2, [sp, #4]
            (RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_PLLON | RCC_CR_CSSON));

#if defined(RCC_PLLSAI_SUPPORT)
  /* Reset PLLSAION bit */
  CLEAR_BIT(vl_mask, RCC_CR_PLLSAION);
 8001388:	9a01      	ldr	r2, [sp, #4]
 800138a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800138e:	9201      	str	r2, [sp, #4]
#endif /* RCC_PLLSAI_SUPPORT */

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SON bit */
  CLEAR_BIT(vl_mask, RCC_CR_PLLI2SON);
 8001390:	9a01      	ldr	r2, [sp, #4]
 8001392:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001396:	9201      	str	r2, [sp, #4]
#endif /* RCC_PLLI2S_SUPPORT */

  /* Write new value in CR register */
  LL_RCC_WriteReg(CR, vl_mask);
 8001398:	9a01      	ldr	r2, [sp, #4]
 800139a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013a6:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <LL_RCC_DeInit+0xb0>)
 80013aa:	681b      	ldr	r3, [r3, #0]

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x10U);

  /* Wait for PLL READY bit to be reset */
  while(LL_RCC_PLL_IsReady() != 0U)
 80013ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013b0:	d1fa      	bne.n	80013a8 <LL_RCC_DeInit+0x4c>
  {}

  /* Reset PLLCFGR register */
  LL_RCC_WriteReg(PLLCFGR, RCC_PLLCFGR_RST_VALUE);
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <LL_RCC_DeInit+0xb0>)
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <LL_RCC_DeInit+0xb4>)
 80013b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SCFGR register */
  LL_RCC_WriteReg(PLLI2SCFGR, RCC_PLLI2SCFGR_RST_VALUE);
 80013b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Reset PLLSAICFGR register */
  LL_RCC_WriteReg(PLLSAICFGR, RCC_PLLSAICFGR_RST_VALUE);
 80013bc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80013c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* RCC_PLLSAI_SUPPORT */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80013ca:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013d2:	60da      	str	r2, [r3, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013da:	60da      	str	r2, [r3, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	f442 021f 	orr.w	r2, r2, #10420224	; 0x9f0000
 80013e2:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80013ea:	60da      	str	r2, [r3, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013f2:	60da      	str	r2, [r3, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80013f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80013fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80013fe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001402:	675a      	str	r2, [r3, #116]	; 0x74

  return SUCCESS;
}
 8001404:	2000      	movs	r0, #0
 8001406:	b002      	add	sp, #8
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	24003010 	.word	0x24003010

08001414 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <RCC_GetHCLKClockFreq+0x10>)
 8001416:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001418:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800141c:	4a02      	ldr	r2, [pc, #8]	; (8001428 <RCC_GetHCLKClockFreq+0x14>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001420:	40d8      	lsrs	r0, r3
 8001422:	4770      	bx	lr
 8001424:	40023800 	.word	0x40023800
 8001428:	080025e8 	.word	0x080025e8

0800142c <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <RCC_GetPCLK1ClockFreq+0x10>)
 800142e:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001430:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001434:	4a02      	ldr	r2, [pc, #8]	; (8001440 <RCC_GetPCLK1ClockFreq+0x14>)
 8001436:	5cd3      	ldrb	r3, [r2, r3]
}
 8001438:	40d8      	lsrs	r0, r3
 800143a:	4770      	bx	lr
 800143c:	40023800 	.word	0x40023800
 8001440:	080025f8 	.word	0x080025f8

08001444 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <RCC_GetPCLK2ClockFreq+0x10>)
 8001446:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001448:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800144c:	4a02      	ldr	r2, [pc, #8]	; (8001458 <RCC_GetPCLK2ClockFreq+0x14>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001450:	40d8      	lsrs	r0, r3
 8001452:	4770      	bx	lr
 8001454:	40023800 	.word	0x40023800
 8001458:	080025f8 	.word	0x080025f8

0800145c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8001464:	b99b      	cbnz	r3, 800148e <RCC_PLL_GetFreqDomain_SYS+0x32>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <RCC_PLL_GetFreqDomain_SYS+0x60>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001468:	2808      	cmp	r0, #8
 800146a:	d012      	beq.n	8001492 <RCC_PLL_GetFreqDomain_SYS+0x36>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800146e:	6851      	ldr	r1, [r2, #4]
 8001470:	f001 013f 	and.w	r1, r1, #63	; 0x3f
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001474:	fbb3 f0f1 	udiv	r0, r3, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001478:	6853      	ldr	r3, [r2, #4]
 800147a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800147e:	fb03 f000 	mul.w	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001482:	6853      	ldr	r3, [r2, #4]
 8001484:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001488:	fbb0 f0f3 	udiv	r0, r0, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 800148c:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001490:	e7ea      	b.n	8001468 <RCC_PLL_GetFreqDomain_SYS+0xc>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001494:	6851      	ldr	r1, [r2, #4]
 8001496:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800149a:	fbb3 f0f1 	udiv	r0, r3, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800149e:	6853      	ldr	r3, [r2, #4]
 80014a0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80014a4:	fb03 f000 	mul.w	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80014a8:	6853      	ldr	r3, [r2, #4]
 80014aa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014ae:	3301      	adds	r3, #1
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80014b6:	4770      	bx	lr
 80014b8:	40023800 	.word	0x40023800
 80014bc:	00f42400 	.word	0x00f42400
 80014c0:	007a1200 	.word	0x007a1200

080014c4 <RCC_GetSystemClockFreq>:
{
 80014c4:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <RCC_GetSystemClockFreq+0x30>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d007      	beq.n	80014e2 <RCC_GetSystemClockFreq+0x1e>
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d009      	beq.n	80014ea <RCC_GetSystemClockFreq+0x26>
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d001      	beq.n	80014de <RCC_GetSystemClockFreq+0x1a>
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <RCC_GetSystemClockFreq+0x34>)
}
 80014dc:	bd08      	pop	{r3, pc}
      frequency = HSE_VALUE;
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <RCC_GetSystemClockFreq+0x38>)
 80014e0:	e7fc      	b.n	80014dc <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80014e2:	2008      	movs	r0, #8
 80014e4:	f7ff ffba 	bl	800145c <RCC_PLL_GetFreqDomain_SYS>
      break;
 80014e8:	e7f8      	b.n	80014dc <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80014ea:	200c      	movs	r0, #12
 80014ec:	f7ff ffb6 	bl	800145c <RCC_PLL_GetFreqDomain_SYS>
      break;
 80014f0:	e7f4      	b.n	80014dc <RCC_GetSystemClockFreq+0x18>
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	00f42400 	.word	0x00f42400
 80014fc:	007a1200 	.word	0x007a1200

08001500 <LL_RCC_GetSystemClocksFreq>:
{
 8001500:	b510      	push	{r4, lr}
 8001502:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001504:	f7ff ffde 	bl	80014c4 <RCC_GetSystemClockFreq>
 8001508:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800150a:	f7ff ff83 	bl	8001414 <RCC_GetHCLKClockFreq>
 800150e:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001510:	f7ff ff8c 	bl	800142c <RCC_GetPCLK1ClockFreq>
 8001514:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001516:	6860      	ldr	r0, [r4, #4]
 8001518:	f7ff ff94 	bl	8001444 <RCC_GetPCLK2ClockFreq>
 800151c:	60e0      	str	r0, [r4, #12]
}
 800151e:	bd10      	pop	{r4, pc}

08001520 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001520:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001522:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001526:	d001      	beq.n	800152c <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8001528:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800152a:	4770      	bx	lr
{
 800152c:	b530      	push	{r4, r5, lr}
 800152e:	b085      	sub	sp, #20
 8001530:	4604      	mov	r4, r0
 8001532:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8001534:	68c3      	ldr	r3, [r0, #12]
 8001536:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800153a:	f023 030c 	bic.w	r3, r3, #12
 800153e:	684a      	ldr	r2, [r1, #4]
 8001540:	68c9      	ldr	r1, [r1, #12]
 8001542:	430a      	orrs	r2, r1
 8001544:	6929      	ldr	r1, [r5, #16]
 8001546:	430a      	orrs	r2, r1
 8001548:	69a9      	ldr	r1, [r5, #24]
 800154a:	430a      	orrs	r2, r1
 800154c:	4313      	orrs	r3, r2
 800154e:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001550:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001552:	6902      	ldr	r2, [r0, #16]
 8001554:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001558:	4313      	orrs	r3, r2
 800155a:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800155c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800155e:	6942      	ldr	r2, [r0, #20]
 8001560:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001564:	4313      	orrs	r3, r2
 8001566:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001568:	4668      	mov	r0, sp
 800156a:	f7ff ffc9 	bl	8001500 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <LL_USART_Init+0x15c>)
 8001570:	429c      	cmp	r4, r3
 8001572:	d010      	beq.n	8001596 <LL_USART_Init+0x76>
    else if (USARTx == USART2)
 8001574:	4b42      	ldr	r3, [pc, #264]	; (8001680 <LL_USART_Init+0x160>)
 8001576:	429c      	cmp	r4, r3
 8001578:	d014      	beq.n	80015a4 <LL_USART_Init+0x84>
    else if (USARTx == USART3)
 800157a:	4b42      	ldr	r3, [pc, #264]	; (8001684 <LL_USART_Init+0x164>)
 800157c:	429c      	cmp	r4, r3
 800157e:	d013      	beq.n	80015a8 <LL_USART_Init+0x88>
    else if (USARTx == USART6)
 8001580:	4b41      	ldr	r3, [pc, #260]	; (8001688 <LL_USART_Init+0x168>)
 8001582:	429c      	cmp	r4, r3
 8001584:	d012      	beq.n	80015ac <LL_USART_Init+0x8c>
    else if (USARTx == UART4)
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <LL_USART_Init+0x16c>)
 8001588:	429c      	cmp	r4, r3
 800158a:	d011      	beq.n	80015b0 <LL_USART_Init+0x90>
    else if (USARTx == UART5)
 800158c:	4b40      	ldr	r3, [pc, #256]	; (8001690 <LL_USART_Init+0x170>)
 800158e:	429c      	cmp	r4, r3
 8001590:	d010      	beq.n	80015b4 <LL_USART_Init+0x94>
  ErrorStatus status = ERROR;
 8001592:	2001      	movs	r0, #1
 8001594:	e06f      	b.n	8001676 <LL_USART_Init+0x156>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001596:	9a03      	ldr	r2, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001598:	2a00      	cmp	r2, #0
 800159a:	d06b      	beq.n	8001674 <LL_USART_Init+0x154>
        && (USART_InitStruct->BaudRate != 0U))
 800159c:	682b      	ldr	r3, [r5, #0]
 800159e:	b95b      	cbnz	r3, 80015b8 <LL_USART_Init+0x98>
  ErrorStatus status = ERROR;
 80015a0:	2001      	movs	r0, #1
 80015a2:	e068      	b.n	8001676 <LL_USART_Init+0x156>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80015a4:	9a02      	ldr	r2, [sp, #8]
 80015a6:	e7f7      	b.n	8001598 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80015a8:	9a02      	ldr	r2, [sp, #8]
 80015aa:	e7f5      	b.n	8001598 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80015ac:	9a03      	ldr	r2, [sp, #12]
 80015ae:	e7f3      	b.n	8001598 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80015b0:	9a02      	ldr	r2, [sp, #8]
 80015b2:	e7f1      	b.n	8001598 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80015b4:	9a02      	ldr	r2, [sp, #8]
 80015b6:	e7ef      	b.n	8001598 <LL_USART_Init+0x78>
      LL_USART_SetBaudRate(USARTx,
 80015b8:	69a9      	ldr	r1, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80015ba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80015be:	d02c      	beq.n	800161a <LL_USART_Init+0xfa>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80015c0:	2100      	movs	r1, #0
 80015c2:	1890      	adds	r0, r2, r2
 80015c4:	4149      	adcs	r1, r1
 80015c6:	1880      	adds	r0, r0, r2
 80015c8:	f141 0100 	adc.w	r1, r1, #0
 80015cc:	00c9      	lsls	r1, r1, #3
 80015ce:	ea41 7150 	orr.w	r1, r1, r0, lsr #29
 80015d2:	00c0      	lsls	r0, r0, #3
 80015d4:	1880      	adds	r0, r0, r2
 80015d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80015da:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80015de:	f141 0100 	adc.w	r1, r1, #0
 80015e2:	f7fe fe0f 	bl	8000204 <__aeabi_uldivmod>
 80015e6:	492b      	ldr	r1, [pc, #172]	; (8001694 <LL_USART_Init+0x174>)
 80015e8:	fba1 2300 	umull	r2, r3, r1, r0
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	011a      	lsls	r2, r3, #4
 80015f0:	b292      	uxth	r2, r2
 80015f2:	2564      	movs	r5, #100	; 0x64
 80015f4:	fb05 0313 	mls	r3, r5, r3, r0
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	3332      	adds	r3, #50	; 0x32
 80015fc:	fba1 1303 	umull	r1, r3, r1, r3
 8001600:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8001604:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8001608:	440a      	add	r2, r1
 800160a:	b292      	uxth	r2, r2
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	4413      	add	r3, r2
 8001612:	b29b      	uxth	r3, r3
 8001614:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8001616:	2000      	movs	r0, #0
}
 8001618:	e02d      	b.n	8001676 <LL_USART_Init+0x156>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800161a:	2500      	movs	r5, #0
 800161c:	1890      	adds	r0, r2, r2
 800161e:	eb45 0105 	adc.w	r1, r5, r5
 8001622:	1880      	adds	r0, r0, r2
 8001624:	f141 0100 	adc.w	r1, r1, #0
 8001628:	00c9      	lsls	r1, r1, #3
 800162a:	ea41 7150 	orr.w	r1, r1, r0, lsr #29
 800162e:	00c0      	lsls	r0, r0, #3
 8001630:	1880      	adds	r0, r0, r2
 8001632:	f141 0100 	adc.w	r1, r1, #0
 8001636:	18da      	adds	r2, r3, r3
 8001638:	eb45 0305 	adc.w	r3, r5, r5
 800163c:	f7fe fde2 	bl	8000204 <__aeabi_uldivmod>
 8001640:	4914      	ldr	r1, [pc, #80]	; (8001694 <LL_USART_Init+0x174>)
 8001642:	fba1 2300 	umull	r2, r3, r1, r0
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	011a      	lsls	r2, r3, #4
 800164a:	b292      	uxth	r2, r2
 800164c:	2564      	movs	r5, #100	; 0x64
 800164e:	fb05 0313 	mls	r3, r5, r3, r0
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	3332      	adds	r3, #50	; 0x32
 8001656:	fba1 1303 	umull	r1, r3, r1, r3
 800165a:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800165e:	0059      	lsls	r1, r3, #1
 8001660:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 8001664:	440a      	add	r2, r1
 8001666:	b292      	uxth	r2, r2
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4413      	add	r3, r2
 800166e:	b29b      	uxth	r3, r3
 8001670:	60a3      	str	r3, [r4, #8]
 8001672:	e7d0      	b.n	8001616 <LL_USART_Init+0xf6>
  ErrorStatus status = ERROR;
 8001674:	2001      	movs	r0, #1
}
 8001676:	b005      	add	sp, #20
 8001678:	bd30      	pop	{r4, r5, pc}
 800167a:	bf00      	nop
 800167c:	40011000 	.word	0x40011000
 8001680:	40004400 	.word	0x40004400
 8001684:	40004800 	.word	0x40004800
 8001688:	40011400 	.word	0x40011400
 800168c:	40004c00 	.word	0x40004c00
 8001690:	40005000 	.word	0x40005000
 8001694:	51eb851f 	.word	0x51eb851f

08001698 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <LL_SetSystemCoreClock+0x8>)
 800169a:	6018      	str	r0, [r3, #0]
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000

080016a4 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 80016a4:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80016a6:	4770      	bx	lr

080016a8 <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 80016a8:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 80016aa:	4770      	bx	lr

080016ac <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 80016ac:	b508      	push	{r3, lr}
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 80016ae:	f7ff fff9 	bl	80016a4 <CpuIrqDisable>
} /*** end of CpuInit ***/
 80016b2:	bd08      	pop	{r3, pc}

080016b4 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 80016b4:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 80016b6:	f000 fb93 	bl	8001de0 <NvmVerifyChecksum>
 80016ba:	b900      	cbnz	r0, 80016be <CpuStartUserProgram+0xa>
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 80016bc:	bd10      	pop	{r4, pc}
  if (CpuUserProgramStartHook() == BLT_FALSE)
 80016be:	f7fe ff27 	bl	8000510 <CpuUserProgramStartHook>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	d0fa      	beq.n	80016bc <CpuStartUserProgram+0x8>
  ComFree();
 80016c6:	f000 fca9 	bl	800201c <ComFree>
  HAL_DeInit();
 80016ca:	f7ff f981 	bl	80009d0 <HAL_DeInit>
  TimerReset();
 80016ce:	f000 fbdb 	bl	8001e88 <TimerReset>
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 80016d2:	f000 fb89 	bl	8001de8 <NvmGetUserProgBaseAddress>
 80016d6:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80016da:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <CpuStartUserProgram+0x3c>)
 80016e0:	6098      	str	r0, [r3, #8]
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 80016e2:	f000 fb81 	bl	8001de8 <NvmGetUserProgBaseAddress>
 80016e6:	6844      	ldr	r4, [r0, #4]
  CpuIrqEnable();
 80016e8:	f7ff ffde 	bl	80016a8 <CpuIrqEnable>
  pProgResetHandler();
 80016ec:	47a0      	blx	r4
 80016ee:	e7e5      	b.n	80016bc <CpuStartUserProgram+0x8>
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 80016f4:	b570      	push	{r4, r5, r6, lr}
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 80016f6:	460d      	mov	r5, r1
  to = (blt_int8u *)dest;
 80016f8:	4604      	mov	r4, r0

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 80016fa:	e006      	b.n	800170a <CpuMemCopy+0x16>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80016fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001700:	f804 3b01 	strb.w	r3, [r4], #1
    /* keep the watchdog happy */
    CopService();
 8001704:	f000 fcd0 	bl	80020a8 <CopService>
  while (len-- > 0)
 8001708:	4632      	mov	r2, r6
 800170a:	1e53      	subs	r3, r2, #1
 800170c:	b29e      	uxth	r6, r3
 800170e:	2a00      	cmp	r2, #0
 8001710:	d1f4      	bne.n	80016fc <CpuMemCopy+0x8>
  }
} /*** end of CpuMemCopy ***/
 8001712:	bd70      	pop	{r4, r5, r6, pc}

08001714 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8001714:	b538      	push	{r3, r4, r5, lr}
 8001716:	4605      	mov	r5, r0
  blt_int8u result = FLASH_INVALID_SECTOR;
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8001718:	2400      	movs	r4, #0
 800171a:	e001      	b.n	8001720 <FlashGetSector+0xc>
 800171c:	3401      	adds	r4, #1
 800171e:	b2e4      	uxtb	r4, r4
 8001720:	2c06      	cmp	r4, #6
 8001722:	d815      	bhi.n	8001750 <FlashGetSector+0x3c>
  {
    /* keep the watchdog happy */
    CopService();
 8001724:	f000 fcc0 	bl	80020a8 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8001728:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800172c:	4a09      	ldr	r2, [pc, #36]	; (8001754 <FlashGetSector+0x40>)
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	42ab      	cmp	r3, r5
 8001734:	d8f2      	bhi.n	800171c <FlashGetSector+0x8>
        (address < (flashLayout[sectorIdx].sector_start + \
                    flashLayout[sectorIdx].sector_size)))
 8001736:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800173a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800173e:	6852      	ldr	r2, [r2, #4]
        (address < (flashLayout[sectorIdx].sector_start + \
 8001740:	4413      	add	r3, r2
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8001742:	42ab      	cmp	r3, r5
 8001744:	d9ea      	bls.n	800171c <FlashGetSector+0x8>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8001746:	4b03      	ldr	r3, [pc, #12]	; (8001754 <FlashGetSector+0x40>)
 8001748:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800174c:	7a18      	ldrb	r0, [r3, #8]
      /* all done so no need to continue looping */
      break;
 800174e:	e000      	b.n	8001752 <FlashGetSector+0x3e>
  blt_int8u result = FLASH_INVALID_SECTOR;
 8001750:	20ff      	movs	r0, #255	; 0xff
    }
  }
  /* give the result back to the caller */
  return result;
} /*** end of FlashGetSector ***/
 8001752:	bd38      	pop	{r3, r4, r5, pc}
 8001754:	0800263c 	.word	0x0800263c

08001758 <FlashInitBlock>:
{
 8001758:	b508      	push	{r3, lr}
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 800175a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800175e:	b953      	cbnz	r3, 8001776 <FlashInitBlock+0x1e>
  if (block->base_addr == address)
 8001760:	6803      	ldr	r3, [r0, #0]
 8001762:	428b      	cmp	r3, r1
 8001764:	d009      	beq.n	800177a <FlashInitBlock+0x22>
  block->base_addr = address;
 8001766:	f840 1b04 	str.w	r1, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 800176a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176e:	f7ff ffc1 	bl	80016f4 <CpuMemCopy>
  return BLT_TRUE;
 8001772:	2001      	movs	r0, #1
} /*** end of FlashInitBlock ***/
 8001774:	bd08      	pop	{r3, pc}
    return BLT_FALSE;
 8001776:	2000      	movs	r0, #0
 8001778:	e7fc      	b.n	8001774 <FlashInitBlock+0x1c>
    return BLT_TRUE;
 800177a:	2001      	movs	r0, #1
 800177c:	e7fa      	b.n	8001774 <FlashInitBlock+0x1c>

0800177e <FlashWriteBlock>:
{
 800177e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001782:	4607      	mov	r7, r0
  HAL_FLASH_Unlock();
 8001784:	f7ff fa84 	bl	8000c90 <HAL_FLASH_Unlock>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8001788:	2400      	movs	r4, #0
 800178a:	2c7f      	cmp	r4, #127	; 0x7f
 800178c:	d815      	bhi.n	80017ba <FlashWriteBlock+0x3c>
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 800178e:	683e      	ldr	r6, [r7, #0]
 8001790:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8001794:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8001798:	685d      	ldr	r5, [r3, #4]
    CopService();
 800179a:	f000 fc85 	bl	80020a8 <CopService>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 800179e:	462a      	mov	r2, r5
 80017a0:	2300      	movs	r3, #0
 80017a2:	4641      	mov	r1, r8
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7ff fac5 	bl	8000d34 <HAL_FLASH_Program>
 80017aa:	4680      	mov	r8, r0
 80017ac:	b940      	cbnz	r0, 80017c0 <FlashWriteBlock+0x42>
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 80017ae:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80017b2:	42ab      	cmp	r3, r5
 80017b4:	d106      	bne.n	80017c4 <FlashWriteBlock+0x46>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 80017b6:	3401      	adds	r4, #1
 80017b8:	e7e7      	b.n	800178a <FlashWriteBlock+0xc>
  blt_bool   result = BLT_TRUE;
 80017ba:	f04f 0801 	mov.w	r8, #1
 80017be:	e001      	b.n	80017c4 <FlashWriteBlock+0x46>
      result = BLT_FALSE;
 80017c0:	f04f 0800 	mov.w	r8, #0
  HAL_FLASH_Lock();
 80017c4:	f7ff fa7c 	bl	8000cc0 <HAL_FLASH_Lock>
} /*** end of FlashWriteBlock ***/
 80017c8:	4640      	mov	r0, r8
 80017ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080017d0 <FlashSwitchBlock>:
{
 80017d0:	b538      	push	{r3, r4, r5, lr}
 80017d2:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <FlashSwitchBlock+0x38>)
 80017d6:	4298      	cmp	r0, r3
 80017d8:	d011      	beq.n	80017fe <FlashSwitchBlock+0x2e>
 80017da:	4604      	mov	r4, r0
  else if (base_addr == flashLayout[0].sector_start)
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <FlashSwitchBlock+0x3c>)
 80017de:	4299      	cmp	r1, r3
 80017e0:	d107      	bne.n	80017f2 <FlashSwitchBlock+0x22>
    block = &bootBlockInfo;
 80017e2:	4c09      	ldr	r4, [pc, #36]	; (8001808 <FlashSwitchBlock+0x38>)
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 80017e4:	4629      	mov	r1, r5
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff ffb6 	bl	8001758 <FlashInitBlock>
 80017ec:	b148      	cbz	r0, 8001802 <FlashSwitchBlock+0x32>
} /*** end of FlashSwitchBlock ***/
 80017ee:	4620      	mov	r0, r4
 80017f0:	bd38      	pop	{r3, r4, r5, pc}
    if (FlashWriteBlock(block) == BLT_FALSE)
 80017f2:	f7ff ffc4 	bl	800177e <FlashWriteBlock>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d1f4      	bne.n	80017e4 <FlashSwitchBlock+0x14>
      return BLT_NULL;
 80017fa:	2400      	movs	r4, #0
 80017fc:	e7f7      	b.n	80017ee <FlashSwitchBlock+0x1e>
    block = &blockInfo;
 80017fe:	4c04      	ldr	r4, [pc, #16]	; (8001810 <FlashSwitchBlock+0x40>)
 8001800:	e7f0      	b.n	80017e4 <FlashSwitchBlock+0x14>
    return BLT_NULL;
 8001802:	2400      	movs	r4, #0
 8001804:	e7f3      	b.n	80017ee <FlashSwitchBlock+0x1e>
 8001806:	bf00      	nop
 8001808:	2000025c 	.word	0x2000025c
 800180c:	08004000 	.word	0x08004000
 8001810:	20000058 	.word	0x20000058

08001814 <FlashAddToBlock>:
{
 8001814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001818:	4606      	mov	r6, r0
 800181a:	460c      	mov	r4, r1
 800181c:	4617      	mov	r7, r2
 800181e:	461d      	mov	r5, r3
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8001820:	f421 78ff 	bic.w	r8, r1, #510	; 0x1fe
 8001824:	f028 0801 	bic.w	r8, r8, #1
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8001828:	6803      	ldr	r3, [r0, #0]
 800182a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800182e:	d007      	beq.n	8001840 <FlashAddToBlock+0x2c>
  if (block->base_addr != current_base_addr)
 8001830:	6833      	ldr	r3, [r6, #0]
 8001832:	4543      	cmp	r3, r8
 8001834:	d10a      	bne.n	800184c <FlashAddToBlock+0x38>
  dst = &(block->data[address - block->base_addr]);
 8001836:	6833      	ldr	r3, [r6, #0]
 8001838:	1ae4      	subs	r4, r4, r3
 800183a:	4434      	add	r4, r6
 800183c:	3404      	adds	r4, #4
  src = data;
 800183e:	e014      	b.n	800186a <FlashAddToBlock+0x56>
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8001840:	4641      	mov	r1, r8
 8001842:	f7ff ff89 	bl	8001758 <FlashInitBlock>
 8001846:	2800      	cmp	r0, #0
 8001848:	d1f2      	bne.n	8001830 <FlashAddToBlock+0x1c>
 800184a:	e01f      	b.n	800188c <FlashAddToBlock+0x78>
    block = FlashSwitchBlock(block, current_base_addr);
 800184c:	4641      	mov	r1, r8
 800184e:	4630      	mov	r0, r6
 8001850:	f7ff ffbe 	bl	80017d0 <FlashSwitchBlock>
    if (block == BLT_NULL)
 8001854:	4606      	mov	r6, r0
 8001856:	2800      	cmp	r0, #0
 8001858:	d1ed      	bne.n	8001836 <FlashAddToBlock+0x22>
      return BLT_FALSE;
 800185a:	2000      	movs	r0, #0
 800185c:	e016      	b.n	800188c <FlashAddToBlock+0x78>
    *dst = *src;
 800185e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001862:	f804 3b01 	strb.w	r3, [r4], #1
  while (len > 0);
 8001866:	3d01      	subs	r5, #1
 8001868:	d00f      	beq.n	800188a <FlashAddToBlock+0x76>
    CopService();
 800186a:	f000 fc1d 	bl	80020a8 <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 800186e:	1d31      	adds	r1, r6, #4
 8001870:	1a61      	subs	r1, r4, r1
 8001872:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001876:	d3f2      	bcc.n	800185e <FlashAddToBlock+0x4a>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8001878:	f508 7100 	add.w	r1, r8, #512	; 0x200
 800187c:	4630      	mov	r0, r6
 800187e:	f7ff ffa7 	bl	80017d0 <FlashSwitchBlock>
      if (block == BLT_NULL)
 8001882:	4606      	mov	r6, r0
 8001884:	b120      	cbz	r0, 8001890 <FlashAddToBlock+0x7c>
      dst = &(block->data[0]);
 8001886:	1d04      	adds	r4, r0, #4
 8001888:	e7e9      	b.n	800185e <FlashAddToBlock+0x4a>
  return BLT_TRUE;
 800188a:	2001      	movs	r0, #1
} /*** end of FlashAddToBlock ***/
 800188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLT_FALSE;
 8001890:	2000      	movs	r0, #0
 8001892:	e7fb      	b.n	800188c <FlashAddToBlock+0x78>

08001894 <FlashEmptyCheckSector>:
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	2b06      	cmp	r3, #6
 8001898:	d834      	bhi.n	8001904 <FlashEmptyCheckSector+0x70>
{
 800189a:	b570      	push	{r4, r5, r6, lr}
    if (flashLayout[sectorIdx].sector_num == sector_num)
 800189c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80018a0:	4a19      	ldr	r2, [pc, #100]	; (8001908 <FlashEmptyCheckSector+0x74>)
 80018a2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80018a6:	7a12      	ldrb	r2, [r2, #8]
 80018a8:	4282      	cmp	r2, r0
 80018aa:	d005      	beq.n	80018b8 <FlashEmptyCheckSector+0x24>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b06      	cmp	r3, #6
 80018b2:	d9f3      	bls.n	800189c <FlashEmptyCheckSector+0x8>
  blt_bool   result = BLT_FALSE;
 80018b4:	2000      	movs	r0, #0
} /*** end of FlashEmptyCheckSector ***/
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
      sectorAddr = flashLayout[sectorIdx].sector_start;
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <FlashEmptyCheckSector+0x74>)
 80018ba:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
      sectorSize = flashLayout[sectorIdx].sector_size;
 80018be:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80018c2:	685e      	ldr	r6, [r3, #4]
      ASSERT_RT(((sectorAddr % sizeof(blt_int32u)) == 0) && 
 80018c4:	f015 0f03 	tst.w	r5, #3
 80018c8:	d102      	bne.n	80018d0 <FlashEmptyCheckSector+0x3c>
 80018ca:	f016 0f03 	tst.w	r6, #3
 80018ce:	d004      	beq.n	80018da <FlashEmptyCheckSector+0x46>
 80018d0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <FlashEmptyCheckSector+0x78>)
 80018d6:	f000 fb21 	bl	8001f1c <AssertFailure>
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 80018da:	2400      	movs	r4, #0
 80018dc:	e005      	b.n	80018ea <FlashEmptyCheckSector+0x56>
        if (*wordPtr != 0xFFFFFFFFu)
 80018de:	682b      	ldr	r3, [r5, #0]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018e4:	d10c      	bne.n	8001900 <FlashEmptyCheckSector+0x6c>
        wordPtr++;
 80018e6:	3504      	adds	r5, #4
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 80018e8:	3401      	adds	r4, #1
 80018ea:	ebb4 0f96 	cmp.w	r4, r6, lsr #2
 80018ee:	d205      	bcs.n	80018fc <FlashEmptyCheckSector+0x68>
        if ((wordCnt % 256) == 0)
 80018f0:	f014 0fff 	tst.w	r4, #255	; 0xff
 80018f4:	d1f3      	bne.n	80018de <FlashEmptyCheckSector+0x4a>
          CopService();
 80018f6:	f000 fbd7 	bl	80020a8 <CopService>
 80018fa:	e7f0      	b.n	80018de <FlashEmptyCheckSector+0x4a>
      result = BLT_TRUE;
 80018fc:	2001      	movs	r0, #1
 80018fe:	e7da      	b.n	80018b6 <FlashEmptyCheckSector+0x22>
          result = BLT_FALSE;
 8001900:	2000      	movs	r0, #0
 8001902:	e7d8      	b.n	80018b6 <FlashEmptyCheckSector+0x22>
  blt_bool   result = BLT_FALSE;
 8001904:	2000      	movs	r0, #0
} /*** end of FlashEmptyCheckSector ***/
 8001906:	4770      	bx	lr
 8001908:	0800263c 	.word	0x0800263c
 800190c:	08002600 	.word	0x08002600

08001910 <FlashEraseSectors>:
{
 8001910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	4604      	mov	r4, r0
 8001916:	460e      	mov	r6, r1
  blt_int32u eraseSectorError = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	9300      	str	r3, [sp, #0]
  if (first_sector > last_sector)
 800191c:	4288      	cmp	r0, r1
 800191e:	d807      	bhi.n	8001930 <FlashEraseSectors+0x20>
  blt_bool result = BLT_TRUE;
 8001920:	2501      	movs	r5, #1
  if ((first_sector < flashLayout[0].sector_num) || \
 8001922:	b34c      	cbz	r4, 8001978 <FlashEraseSectors+0x68>
 8001924:	2e07      	cmp	r6, #7
 8001926:	d826      	bhi.n	8001976 <FlashEraseSectors+0x66>
  if (result == BLT_TRUE)
 8001928:	2d01      	cmp	r5, #1
 800192a:	d003      	beq.n	8001934 <FlashEraseSectors+0x24>
 800192c:	462c      	mov	r4, r5
 800192e:	e023      	b.n	8001978 <FlashEraseSectors+0x68>
    result = BLT_FALSE;
 8001930:	2500      	movs	r5, #0
 8001932:	e7f6      	b.n	8001922 <FlashEraseSectors+0x12>
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001934:	2300      	movs	r3, #0
 8001936:	9301      	str	r3, [sp, #4]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001938:	2302      	movs	r3, #2
 800193a:	9305      	str	r3, [sp, #20]
    eraseInitStruct.NbSectors = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	9304      	str	r3, [sp, #16]
    HAL_FLASH_Unlock();
 8001940:	f7ff f9a6 	bl	8000c90 <HAL_FLASH_Unlock>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8001944:	e001      	b.n	800194a <FlashEraseSectors+0x3a>
 8001946:	3401      	adds	r4, #1
 8001948:	b2e4      	uxtb	r4, r4
 800194a:	42b4      	cmp	r4, r6
 800194c:	d80f      	bhi.n	800196e <FlashEraseSectors+0x5e>
      if (FlashEmptyCheckSector(sectorIdx) == BLT_FALSE)
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff ffa0 	bl	8001894 <FlashEmptyCheckSector>
 8001954:	4607      	mov	r7, r0
 8001956:	2800      	cmp	r0, #0
 8001958:	d1f5      	bne.n	8001946 <FlashEraseSectors+0x36>
        CopService();
 800195a:	f000 fba5 	bl	80020a8 <CopService>
        eraseInitStruct.Sector = sectorIdx;
 800195e:	9403      	str	r4, [sp, #12]
        if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8001960:	4669      	mov	r1, sp
 8001962:	a801      	add	r0, sp, #4
 8001964:	f7ff fa8c 	bl	8000e80 <HAL_FLASHEx_Erase>
 8001968:	2800      	cmp	r0, #0
 800196a:	d0ec      	beq.n	8001946 <FlashEraseSectors+0x36>
          result = BLT_FALSE;
 800196c:	463d      	mov	r5, r7
    HAL_FLASH_Lock();
 800196e:	f7ff f9a7 	bl	8000cc0 <HAL_FLASH_Lock>
 8001972:	462c      	mov	r4, r5
 8001974:	e000      	b.n	8001978 <FlashEraseSectors+0x68>
    result = BLT_FALSE;
 8001976:	2400      	movs	r4, #0
} /*** end of FlashEraseSectors ***/
 8001978:	4620      	mov	r0, r4
 800197a:	b007      	add	sp, #28
 800197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001980 <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001984:	4a02      	ldr	r2, [pc, #8]	; (8001990 <FlashInit+0x10>)
 8001986:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8001988:	4a02      	ldr	r2, [pc, #8]	; (8001994 <FlashInit+0x14>)
 800198a:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000058 	.word	0x20000058
 8001994:	2000025c 	.word	0x2000025c

08001998 <FlashWrite>:
{
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	460d      	mov	r5, r1
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 800199c:	3901      	subs	r1, #1
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <FlashWrite+0x58>)
 80019a0:	1a1b      	subs	r3, r3, r0
 80019a2:	4299      	cmp	r1, r3
 80019a4:	d901      	bls.n	80019aa <FlashWrite+0x12>
    return BLT_FALSE;
 80019a6:	2000      	movs	r0, #0
} /*** end of FlashWrite ***/
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
 80019aa:	4604      	mov	r4, r0
 80019ac:	4616      	mov	r6, r2
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 80019ae:	f7ff feb1 	bl	8001714 <FlashGetSector>
 80019b2:	28ff      	cmp	r0, #255	; 0xff
 80019b4:	d013      	beq.n	80019de <FlashWrite+0x46>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 80019b6:	1928      	adds	r0, r5, r4
 80019b8:	3801      	subs	r0, #1
 80019ba:	f7ff feab 	bl	8001714 <FlashGetSector>
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 80019be:	28ff      	cmp	r0, #255	; 0xff
 80019c0:	d00d      	beq.n	80019de <FlashWrite+0x46>
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80019c2:	f424 73ff 	bic.w	r3, r4, #510	; 0x1fe
 80019c6:	f023 0301 	bic.w	r3, r3, #1
  if (base_addr == flashLayout[0].sector_start)
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <FlashWrite+0x5c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d008      	beq.n	80019e2 <FlashWrite+0x4a>
  return FlashAddToBlock(&blockInfo, addr, data, len);
 80019d0:	462b      	mov	r3, r5
 80019d2:	4632      	mov	r2, r6
 80019d4:	4621      	mov	r1, r4
 80019d6:	4808      	ldr	r0, [pc, #32]	; (80019f8 <FlashWrite+0x60>)
 80019d8:	f7ff ff1c 	bl	8001814 <FlashAddToBlock>
 80019dc:	e7e4      	b.n	80019a8 <FlashWrite+0x10>
    return BLT_FALSE;
 80019de:	2000      	movs	r0, #0
 80019e0:	e7e2      	b.n	80019a8 <FlashWrite+0x10>
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 80019e2:	462b      	mov	r3, r5
 80019e4:	4632      	mov	r2, r6
 80019e6:	4621      	mov	r1, r4
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <FlashWrite+0x64>)
 80019ea:	f7ff ff13 	bl	8001814 <FlashAddToBlock>
 80019ee:	e7db      	b.n	80019a8 <FlashWrite+0x10>
 80019f0:	0807ffff 	.word	0x0807ffff
 80019f4:	08004000 	.word	0x08004000
 80019f8:	20000058 	.word	0x20000058
 80019fc:	2000025c 	.word	0x2000025c

08001a00 <FlashErase>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8001a00:	1e4a      	subs	r2, r1, #1
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <FlashErase+0x3c>)
 8001a04:	1a1b      	subs	r3, r3, r0
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d901      	bls.n	8001a0e <FlashErase+0xe>
    return BLT_FALSE;
 8001a0a:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 8001a0c:	4770      	bx	lr
{
 8001a0e:	b570      	push	{r4, r5, r6, lr}
 8001a10:	4605      	mov	r5, r0
 8001a12:	460c      	mov	r4, r1
  first_sector = FlashGetSector(addr);
 8001a14:	f7ff fe7e 	bl	8001714 <FlashGetSector>
 8001a18:	4606      	mov	r6, r0
  last_sector  = FlashGetSector(addr+len-1);
 8001a1a:	442c      	add	r4, r5
 8001a1c:	1e60      	subs	r0, r4, #1
 8001a1e:	f7ff fe79 	bl	8001714 <FlashGetSector>
 8001a22:	4601      	mov	r1, r0
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 8001a24:	2eff      	cmp	r6, #255	; 0xff
 8001a26:	d005      	beq.n	8001a34 <FlashErase+0x34>
 8001a28:	28ff      	cmp	r0, #255	; 0xff
 8001a2a:	d005      	beq.n	8001a38 <FlashErase+0x38>
  return FlashEraseSectors(first_sector, last_sector);
 8001a2c:	4630      	mov	r0, r6
 8001a2e:	f7ff ff6f 	bl	8001910 <FlashEraseSectors>
} /*** end of FlashErase ***/
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
    return BLT_FALSE;
 8001a34:	2000      	movs	r0, #0
 8001a36:	e7fc      	b.n	8001a32 <FlashErase+0x32>
 8001a38:	2000      	movs	r0, #0
 8001a3a:	e7fa      	b.n	8001a32 <FlashErase+0x32>
 8001a3c:	0807ffff 	.word	0x0807ffff

08001a40 <FlashWriteChecksum>:
{
 8001a40:	b500      	push	{lr}
 8001a42:	b083      	sub	sp, #12
  blt_int32u signature_checksum = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	9301      	str	r3, [sp, #4]
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <FlashWriteChecksum+0x58>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a50:	d020      	beq.n	8001a94 <FlashWriteChecksum+0x54>
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <FlashWriteChecksum+0x58>)
 8001a54:	6853      	ldr	r3, [r2, #4]
 8001a56:	9301      	str	r3, [sp, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8001a58:	6891      	ldr	r1, [r2, #8]
 8001a5a:	440b      	add	r3, r1
 8001a5c:	9301      	str	r3, [sp, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8001a5e:	68d1      	ldr	r1, [r2, #12]
 8001a60:	440b      	add	r3, r1
 8001a62:	9301      	str	r3, [sp, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8001a64:	6911      	ldr	r1, [r2, #16]
 8001a66:	440b      	add	r3, r1
 8001a68:	9301      	str	r3, [sp, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8001a6a:	6951      	ldr	r1, [r2, #20]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	9301      	str	r3, [sp, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8001a70:	6991      	ldr	r1, [r2, #24]
 8001a72:	440b      	add	r3, r1
 8001a74:	9301      	str	r3, [sp, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8001a76:	69d2      	ldr	r2, [r2, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	9301      	str	r3, [sp, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	9301      	str	r3, [sp, #4]
  signature_checksum += 1; /* two's complement */
 8001a80:	3301      	adds	r3, #1
 8001a82:	9301      	str	r3, [sp, #4]
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8001a84:	aa01      	add	r2, sp, #4
 8001a86:	2104      	movs	r1, #4
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <FlashWriteChecksum+0x5c>)
 8001a8a:	f7ff ff85 	bl	8001998 <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 8001a8e:	b003      	add	sp, #12
 8001a90:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 8001a94:	2001      	movs	r0, #1
 8001a96:	e7fa      	b.n	8001a8e <FlashWriteChecksum+0x4e>
 8001a98:	2000025c 	.word	0x2000025c
 8001a9c:	080041c4 	.word	0x080041c4

08001aa0 <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <FlashVerifyChecksum+0x2c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	4411      	add	r1, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	4411      	add	r1, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	4411      	add	r1, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	4411      	add	r1, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	4411      	add	r1, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	440a      	add	r2, r1
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8001abc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
  if (signature_checksum == 0)
 8001ac0:	42d3      	cmn	r3, r2
 8001ac2:	d001      	beq.n	8001ac8 <FlashVerifyChecksum+0x28>
  return BLT_FALSE;
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	4770      	bx	lr
    return BLT_TRUE;
 8001ac8:	2001      	movs	r0, #1
} /*** end of FlashVerifyChecksum ***/
 8001aca:	4770      	bx	lr
 8001acc:	08004000 	.word	0x08004000

08001ad0 <FlashDone>:
{
 8001ad0:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <FlashDone+0x34>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ada:	d106      	bne.n	8001aea <FlashDone+0x1a>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <FlashDone+0x38>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ae4:	d107      	bne.n	8001af6 <FlashDone+0x26>
  return BLT_TRUE;
 8001ae6:	2001      	movs	r0, #1
} /*** end of FlashDone ***/
 8001ae8:	bd08      	pop	{r3, pc}
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <FlashDone+0x34>)
 8001aec:	f7ff fe47 	bl	800177e <FlashWriteBlock>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d1f3      	bne.n	8001adc <FlashDone+0xc>
 8001af4:	e7f8      	b.n	8001ae8 <FlashDone+0x18>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8001af6:	4804      	ldr	r0, [pc, #16]	; (8001b08 <FlashDone+0x38>)
 8001af8:	f7ff fe41 	bl	800177e <FlashWriteBlock>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d0f3      	beq.n	8001ae8 <FlashDone+0x18>
  return BLT_TRUE;
 8001b00:	2001      	movs	r0, #1
 8001b02:	e7f1      	b.n	8001ae8 <FlashDone+0x18>
 8001b04:	2000025c 	.word	0x2000025c
 8001b08:	20000058 	.word	0x20000058

08001b0c <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 8001b0c:	4800      	ldr	r0, [pc, #0]	; (8001b10 <FlashGetUserProgBaseAddress+0x4>)
 8001b0e:	4770      	bx	lr
 8001b10:	08004000 	.word	0x08004000

08001b14 <MbRtuReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool MbRtuReceiveByte(blt_int8u *data)
{
 8001b14:	4603      	mov	r3, r0
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001b16:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <MbRtuReceiveByte+0x34>)
 8001b18:	6812      	ldr	r2, [r2, #0]
  blt_bool result = BLT_FALSE;

  /* check if a new byte was received on the configured channel */
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8001b1a:	f012 0f20 	tst.w	r2, #32
 8001b1e:	d011      	beq.n	8001b44 <MbRtuReceiveByte+0x30>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001b20:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <MbRtuReceiveByte+0x34>)
 8001b22:	6812      	ldr	r2, [r2, #0]
     * present, causing a framing error. Long story short: if you don't check for the
     * framing error flag, you might receive an extra byte with value 0, which is not
     * actually transmitted on the RS485 bus. you can catch and ignore this byte by doing
     * a frame error check.
     */
    if (LL_USART_IsActiveFlag_FE(USART_CHANNEL) != 0)
 8001b24:	f012 0f02 	tst.w	r2, #2
 8001b28:	d10a      	bne.n	8001b40 <MbRtuReceiveByte+0x2c>
    result = BLT_TRUE;
 8001b2a:	2001      	movs	r0, #1
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <MbRtuReceiveByte+0x34>)
 8001b2e:	6812      	ldr	r2, [r2, #0]
       */
      result = BLT_FALSE;
    }
    #if (BOOT_COM_MBRTU_PARITY > 0)
    /* check for a parity error. */
    if (LL_USART_IsActiveFlag_PE(USART_CHANNEL) != 0)
 8001b30:	f012 0f01 	tst.w	r2, #1
 8001b34:	d000      	beq.n	8001b38 <MbRtuReceiveByte+0x24>
    {
      /* ignore the byte because of a detected parity error. Note that the parity error
       * flag auto-resets after reading the UART data register, which is done later on in
       * this function.
       */
      result = BLT_FALSE;
 8001b36:	2000      	movs	r0, #0
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001b38:	4a03      	ldr	r2, [pc, #12]	; (8001b48 <MbRtuReceiveByte+0x34>)
 8001b3a:	6852      	ldr	r2, [r2, #4]
    }
    #endif
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	4770      	bx	lr
      result = BLT_FALSE;
 8001b40:	2000      	movs	r0, #0
 8001b42:	e7f3      	b.n	8001b2c <MbRtuReceiveByte+0x18>
  blt_bool result = BLT_FALSE;
 8001b44:	2000      	movs	r0, #0
  }
  /* give the result back to the caller */
  return result;
} /*** end of MbRtuReceiveByte ***/
 8001b46:	4770      	bx	lr
 8001b48:	40004400 	.word	0x40004400

08001b4c <MbRtuTransmitByte>:
**            otherwise.
** \return    none.
**
****************************************************************************************/
static void MbRtuTransmitByte(blt_int8u data, blt_bool end_of_packet)
{
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	460d      	mov	r5, r1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MbRtuTransmitByte+0x44>)
 8001b52:	6058      	str	r0, [r3, #4]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + MBRTU_BYTE_TX_TIMEOUT_MS;
 8001b54:	f000 f9d6 	bl	8001f04 <TimerGet>
 8001b58:	f100 040a 	add.w	r4, r0, #10

  /* not the last byte of the packet? */
  if (end_of_packet == BLT_FALSE)
 8001b5c:	b15d      	cbz	r5, 8001b76 <MbRtuTransmitByte+0x2a>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MbRtuTransmitByte+0x44>)
 8001b60:	681b      	ldr	r3, [r3, #0]
  {
    /* wait for tx complete event. this is needed for the last byte, otherwise the
     * transceiver's transmit output gets disabled with MbRtuDriverOutputControlHook()
     * before the byte reception completes.
     */
    while (LL_USART_IsActiveFlag_TC(USART_CHANNEL) == 0)
 8001b62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001b66:	d111      	bne.n	8001b8c <MbRtuTransmitByte+0x40>
    {
      /* keep the watchdog happy */
      CopService();
 8001b68:	f000 fa9e 	bl	80020a8 <CopService>
      /* break loop upon timeout. this would indicate a hardware failure. */
      if (TimerGet() > timeout)
 8001b6c:	f000 f9ca 	bl	8001f04 <TimerGet>
 8001b70:	42a0      	cmp	r0, r4
 8001b72:	d9f4      	bls.n	8001b5e <MbRtuTransmitByte+0x12>
 8001b74:	e00a      	b.n	8001b8c <MbRtuTransmitByte+0x40>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MbRtuTransmitByte+0x44>)
 8001b78:	681b      	ldr	r3, [r3, #0]
    while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8001b7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b7e:	d105      	bne.n	8001b8c <MbRtuTransmitByte+0x40>
      CopService();
 8001b80:	f000 fa92 	bl	80020a8 <CopService>
      if (TimerGet() > timeout)
 8001b84:	f000 f9be 	bl	8001f04 <TimerGet>
 8001b88:	42a0      	cmp	r0, r4
 8001b8a:	d9f4      	bls.n	8001b76 <MbRtuTransmitByte+0x2a>
      {
        break;
      }
    }
  }
} /*** end of MbRtuTransmitByte ***/
 8001b8c:	bd38      	pop	{r3, r4, r5, pc}
 8001b8e:	bf00      	nop
 8001b90:	40004400 	.word	0x40004400

08001b94 <MbRtuTransmitPacket>:
{
 8001b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b98:	4606      	mov	r6, r0
 8001b9a:	460d      	mov	r5, r1
  ASSERT_RT(len <= BOOT_COM_MBRTU_TX_MAX_DATA);
 8001b9c:	2981      	cmp	r1, #129	; 0x81
 8001b9e:	d823      	bhi.n	8001be8 <MbRtuTransmitPacket+0x54>
  txPacket[0] = BOOT_COM_MBRTU_NODE_ID;
 8001ba0:	4c21      	ldr	r4, [pc, #132]	; (8001c28 <MbRtuTransmitPacket+0x94>)
 8001ba2:	2701      	movs	r7, #1
 8001ba4:	7027      	strb	r7, [r4, #0]
  txPacket[1] = BOOT_COM_MBRTU_FCT_CODE_USER_XCP;
 8001ba6:	236d      	movs	r3, #109	; 0x6d
 8001ba8:	7063      	strb	r3, [r4, #1]
  txPacket[2] = len;
 8001baa:	70a5      	strb	r5, [r4, #2]
  CpuMemCopy((blt_int32u)&txPacket[3], (blt_int32u)data, len);
 8001bac:	fa1f f885 	uxth.w	r8, r5
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	4631      	mov	r1, r6
 8001bb4:	1ce0      	adds	r0, r4, #3
 8001bb6:	f7ff fd9d 	bl	80016f4 <CpuMemCopy>
  checksum = MbRtuCrcCalculate(&txPacket[0], len + 3);
 8001bba:	f108 0103 	add.w	r1, r8, #3
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f000 fa76 	bl	80020b0 <MbRtuCrcCalculate>
  txPacket[len + 3] = (blt_int8u)(checksum & 0xff);
 8001bc4:	1ceb      	adds	r3, r5, #3
 8001bc6:	54e0      	strb	r0, [r4, r3]
  txPacket[len + 4] = (blt_int8u)(checksum  >> 8);
 8001bc8:	3504      	adds	r5, #4
 8001bca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001bce:	5560      	strb	r0, [r4, r5]
  MbRtuDelay(BOOT_COM_MBRTU_DRIVER_OUTPUT_ENABLE_DELAY_US);
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	f000 fa8b 	bl	80020ec <MbRtuDelay>
  MbRtuDriverOutputControlHook(BLT_TRUE);
 8001bd6:	4638      	mov	r0, r7
 8001bd8:	f7fe fca8 	bl	800052c <MbRtuDriverOutputControlHook>
  MbRtuDelay(BOOT_COM_MBRTU_DRIVER_OUTPUT_ENABLE_DELAY_US);
 8001bdc:	200a      	movs	r0, #10
 8001bde:	f000 fa85 	bl	80020ec <MbRtuDelay>
  blt_bool endOfPacket = BLT_FALSE;
 8001be2:	2700      	movs	r7, #0
  for (data_index = 0; data_index < (len + 5); data_index++)
 8001be4:	463c      	mov	r4, r7
 8001be6:	e00b      	b.n	8001c00 <MbRtuTransmitPacket+0x6c>
  ASSERT_RT(len <= BOOT_COM_MBRTU_TX_MAX_DATA);
 8001be8:	21d8      	movs	r1, #216	; 0xd8
 8001bea:	4810      	ldr	r0, [pc, #64]	; (8001c2c <MbRtuTransmitPacket+0x98>)
 8001bec:	f000 f996 	bl	8001f1c <AssertFailure>
 8001bf0:	e7d6      	b.n	8001ba0 <MbRtuTransmitPacket+0xc>
    MbRtuTransmitByte(txPacket[data_index], endOfPacket);
 8001bf2:	4639      	mov	r1, r7
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MbRtuTransmitPacket+0x94>)
 8001bf6:	5d98      	ldrb	r0, [r3, r6]
 8001bf8:	f7ff ffa8 	bl	8001b4c <MbRtuTransmitByte>
  for (data_index = 0; data_index < (len + 5); data_index++)
 8001bfc:	3401      	adds	r4, #1
 8001bfe:	b2a4      	uxth	r4, r4
 8001c00:	4626      	mov	r6, r4
 8001c02:	42a5      	cmp	r5, r4
 8001c04:	db05      	blt.n	8001c12 <MbRtuTransmitPacket+0x7e>
    CopService();
 8001c06:	f000 fa4f 	bl	80020a8 <CopService>
    if (data_index == ((len + 5) - 1))
 8001c0a:	42a5      	cmp	r5, r4
 8001c0c:	d1f1      	bne.n	8001bf2 <MbRtuTransmitPacket+0x5e>
      endOfPacket = BLT_TRUE;
 8001c0e:	2701      	movs	r7, #1
 8001c10:	e7ef      	b.n	8001bf2 <MbRtuTransmitPacket+0x5e>
  MbRtuDelay(BOOT_COM_MBRTU_DRIVER_OUTPUT_DISABLE_DELAY_US);
 8001c12:	200a      	movs	r0, #10
 8001c14:	f000 fa6a 	bl	80020ec <MbRtuDelay>
  MbRtuDriverOutputControlHook(BLT_FALSE);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7fe fc87 	bl	800052c <MbRtuDriverOutputControlHook>
  MbRtuDelay(BOOT_COM_MBRTU_DRIVER_OUTPUT_DISABLE_DELAY_US);
 8001c1e:	200a      	movs	r0, #10
 8001c20:	f000 fa64 	bl	80020ec <MbRtuDelay>
} /*** end of MbRtuTransmitPacket ***/
 8001c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c28:	200004f0 	.word	0x200004f0
 8001c2c:	08002690 	.word	0x08002690

08001c30 <MbRtuFreeRunningCounterGet>:

  /* This port's timer module is based on a 100 kHz free running counter, which is
   * already configured and running. Therefore we just need to read out its free running
   * counter value.
   */
  result = (blt_int16u)TIM1->CNT;
 8001c30:	4b01      	ldr	r3, [pc, #4]	; (8001c38 <MbRtuFreeRunningCounterGet+0x8>)
 8001c32:	6a58      	ldr	r0, [r3, #36]	; 0x24

  /* give the result back to the caller. */
  return result;
} /*** end of MbRtuFreeRunningCounterGet ***/
 8001c34:	b280      	uxth	r0, r0
 8001c36:	4770      	bx	lr
 8001c38:	40010000 	.word	0x40010000

08001c3c <MbRtuInit>:
{
 8001c3c:	b530      	push	{r4, r5, lr}
 8001c3e:	b089      	sub	sp, #36	; 0x24
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001c40:	2400      	movs	r4, #0
 8001c42:	9400      	str	r4, [sp, #0]
 8001c44:	9401      	str	r4, [sp, #4]
 8001c46:	9402      	str	r4, [sp, #8]
 8001c48:	9403      	str	r4, [sp, #12]
 8001c4a:	9404      	str	r4, [sp, #16]
 8001c4c:	9405      	str	r4, [sp, #20]
 8001c4e:	9406      	str	r4, [sp, #24]
    mbRtuT3_5Ticks = 175;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MbRtuInit+0x88>)
 8001c52:	22af      	movs	r2, #175	; 0xaf
 8001c54:	801a      	strh	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001c56:	4d1c      	ldr	r5, [pc, #112]	; (8001cc8 <MbRtuInit+0x8c>)
 8001c58:	68eb      	ldr	r3, [r5, #12]
 8001c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c5e:	60eb      	str	r3, [r5, #12]
  USART_InitStruct.BaudRate = BOOT_COM_MBRTU_BAUDRATE;
 8001c60:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001c64:	9300      	str	r3, [sp, #0]
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8001c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c6a:	9303      	str	r3, [sp, #12]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	9301      	str	r3, [sp, #4]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c72:	230c      	movs	r3, #12
 8001c74:	9304      	str	r3, [sp, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c76:	9405      	str	r4, [sp, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c78:	9406      	str	r4, [sp, #24]
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 8001c7a:	4669      	mov	r1, sp
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f7ff fc4f 	bl	8001520 <LL_USART_Init>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001c82:	68eb      	ldr	r3, [r5, #12]
 8001c84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c88:	60eb      	str	r3, [r5, #12]
  MbRtuDriverOutputControlHook(BLT_FALSE);
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7fe fc4e 	bl	800052c <MbRtuDriverOutputControlHook>
  startTimeTicks = MbRtuFreeRunningCounterGet();
 8001c90:	f7ff ffce 	bl	8001c30 <MbRtuFreeRunningCounterGet>
 8001c94:	4605      	mov	r5, r0
 8001c96:	e005      	b.n	8001ca4 <MbRtuInit+0x68>
    deltaTimeTicks = currentTimeTicks - startTimeTicks;
 8001c98:	1b64      	subs	r4, r4, r5
 8001c9a:	b2a4      	uxth	r4, r4
  while (deltaTimeTicks < mbRtuT3_5Ticks);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MbRtuInit+0x88>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	42a3      	cmp	r3, r4
 8001ca2:	d90c      	bls.n	8001cbe <MbRtuInit+0x82>
    CopService();
 8001ca4:	f000 fa00 	bl	80020a8 <CopService>
    currentTimeTicks = MbRtuFreeRunningCounterGet();
 8001ca8:	f7ff ffc2 	bl	8001c30 <MbRtuFreeRunningCounterGet>
 8001cac:	4604      	mov	r4, r0
    if (MbRtuReceiveByte(&rxDummy) == BLT_TRUE)
 8001cae:	f10d 001f 	add.w	r0, sp, #31
 8001cb2:	f7ff ff2f 	bl	8001b14 <MbRtuReceiveByte>
 8001cb6:	2801      	cmp	r0, #1
 8001cb8:	d1ee      	bne.n	8001c98 <MbRtuInit+0x5c>
      startTimeTicks = currentTimeTicks;
 8001cba:	4625      	mov	r5, r4
 8001cbc:	e7ec      	b.n	8001c98 <MbRtuInit+0x5c>
} /*** end of MbRtuInit ***/
 8001cbe:	b009      	add	sp, #36	; 0x24
 8001cc0:	bd30      	pop	{r4, r5, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000462 	.word	0x20000462
 8001cc8:	40004400 	.word	0x40004400

08001ccc <MbRtuReceivePacket>:
{
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	4605      	mov	r5, r0
 8001cd2:	460c      	mov	r4, r1
  currentTimeTicks = MbRtuFreeRunningCounterGet();
 8001cd4:	f7ff ffac 	bl	8001c30 <MbRtuFreeRunningCounterGet>
 8001cd8:	4606      	mov	r6, r0
  if (MbRtuReceiveByte(&rxByte) == BLT_TRUE)
 8001cda:	f10d 0007 	add.w	r0, sp, #7
 8001cde:	f7ff ff19 	bl	8001b14 <MbRtuReceiveByte>
 8001ce2:	2801      	cmp	r0, #1
 8001ce4:	d007      	beq.n	8001cf6 <MbRtuReceivePacket+0x2a>
  if (packetRxInProgress == BLT_TRUE)
 8001ce6:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <MbRtuReceivePacket+0xe4>)
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	2a01      	cmp	r2, #1
 8001cec:	d01e      	beq.n	8001d2c <MbRtuReceivePacket+0x60>
  blt_bool result = BLT_FALSE;
 8001cee:	2600      	movs	r6, #0
} /*** end of MbRtuReceivePacket ***/
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd70      	pop	{r4, r5, r6, pc}
    lastRxByteTimeTicks = currentTimeTicks;
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <MbRtuReceivePacket+0xe8>)
 8001cf8:	801e      	strh	r6, [r3, #0]
    if (packetRxInProgress == BLT_FALSE)
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <MbRtuReceivePacket+0xe4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b92b      	cbnz	r3, 8001d0c <MbRtuReceivePacket+0x40>
      rxLength = 0;
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <MbRtuReceivePacket+0xec>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
      packetRxInProgress = BLT_TRUE;
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <MbRtuReceivePacket+0xe4>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
    if (rxLength < (sizeof(rxPacket)/sizeof(rxPacket[0])))
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <MbRtuReceivePacket+0xec>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b85      	cmp	r3, #133	; 0x85
 8001d12:	d807      	bhi.n	8001d24 <MbRtuReceivePacket+0x58>
      rxPacket[rxLength] = rxByte;
 8001d14:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001d18:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <MbRtuReceivePacket+0xf0>)
 8001d1a:	54d1      	strb	r1, [r2, r3]
      rxLength++;
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <MbRtuReceivePacket+0xec>)
 8001d20:	7013      	strb	r3, [r2, #0]
 8001d22:	e7e0      	b.n	8001ce6 <MbRtuReceivePacket+0x1a>
      packetRxInProgress = BLT_FALSE;
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <MbRtuReceivePacket+0xe4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e7dc      	b.n	8001ce6 <MbRtuReceivePacket+0x1a>
    deltaTimeTicks = currentTimeTicks - lastRxByteTimeTicks;
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <MbRtuReceivePacket+0xe8>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	1af3      	subs	r3, r6, r3
 8001d32:	b29b      	uxth	r3, r3
    if (deltaTimeTicks >= mbRtuT3_5Ticks)
 8001d34:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <MbRtuReceivePacket+0xf4>)
 8001d36:	8812      	ldrh	r2, [r2, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d836      	bhi.n	8001daa <MbRtuReceivePacket+0xde>
      if (rxLength >= 4)
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <MbRtuReceivePacket+0xec>)
 8001d3e:	7819      	ldrb	r1, [r3, #0]
 8001d40:	2903      	cmp	r1, #3
 8001d42:	d804      	bhi.n	8001d4e <MbRtuReceivePacket+0x82>
  blt_bool result = BLT_FALSE;
 8001d44:	2600      	movs	r6, #0
      packetRxInProgress = BLT_FALSE;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <MbRtuReceivePacket+0xe4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e7d0      	b.n	8001cf0 <MbRtuReceivePacket+0x24>
        checksumCalculated = MbRtuCrcCalculate(&rxPacket[0], rxLength - 2);
 8001d4e:	3902      	subs	r1, #2
 8001d50:	4e1a      	ldr	r6, [pc, #104]	; (8001dbc <MbRtuReceivePacket+0xf0>)
 8001d52:	b289      	uxth	r1, r1
 8001d54:	4630      	mov	r0, r6
 8001d56:	f000 f9ab 	bl	80020b0 <MbRtuCrcCalculate>
        checksumReceived = rxPacket[rxLength - 2] | (rxPacket[rxLength - 1] << 8);
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MbRtuReceivePacket+0xec>)
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	1e93      	subs	r3, r2, #2
 8001d60:	5cf3      	ldrb	r3, [r6, r3]
 8001d62:	1e51      	subs	r1, r2, #1
 8001d64:	5c71      	ldrb	r1, [r6, r1]
 8001d66:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        if (checksumCalculated == checksumReceived)
 8001d6a:	4298      	cmp	r0, r3
 8001d6c:	d001      	beq.n	8001d72 <MbRtuReceivePacket+0xa6>
  blt_bool result = BLT_FALSE;
 8001d6e:	2600      	movs	r6, #0
 8001d70:	e7e9      	b.n	8001d46 <MbRtuReceivePacket+0x7a>
          if ( (rxPacket[0] == BOOT_COM_MBRTU_NODE_ID) &&
 8001d72:	4633      	mov	r3, r6
 8001d74:	7836      	ldrb	r6, [r6, #0]
 8001d76:	2e01      	cmp	r6, #1
 8001d78:	d001      	beq.n	8001d7e <MbRtuReceivePacket+0xb2>
  blt_bool result = BLT_FALSE;
 8001d7a:	2600      	movs	r6, #0
 8001d7c:	e7e3      	b.n	8001d46 <MbRtuReceivePacket+0x7a>
               (rxPacket[1] == BOOT_COM_MBRTU_FCT_CODE_USER_XCP) )
 8001d7e:	785b      	ldrb	r3, [r3, #1]
          if ( (rxPacket[0] == BOOT_COM_MBRTU_NODE_ID) &&
 8001d80:	2b6d      	cmp	r3, #109	; 0x6d
 8001d82:	d001      	beq.n	8001d88 <MbRtuReceivePacket+0xbc>
  blt_bool result = BLT_FALSE;
 8001d84:	2600      	movs	r6, #0
 8001d86:	e7de      	b.n	8001d46 <MbRtuReceivePacket+0x7a>
            if (rxPacket[2] == (rxLength - 5))
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <MbRtuReceivePacket+0xf0>)
 8001d8a:	7899      	ldrb	r1, [r3, #2]
 8001d8c:	1f53      	subs	r3, r2, #5
 8001d8e:	4299      	cmp	r1, r3
 8001d90:	d001      	beq.n	8001d96 <MbRtuReceivePacket+0xca>
  blt_bool result = BLT_FALSE;
 8001d92:	2600      	movs	r6, #0
 8001d94:	e7d7      	b.n	8001d46 <MbRtuReceivePacket+0x7a>
              CpuMemCopy((blt_int32u)data, (blt_int32u)&rxPacket[3], rxLength - 5);
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <MbRtuReceivePacket+0xf8>)
 8001d9a:	4628      	mov	r0, r5
 8001d9c:	f7ff fcaa 	bl	80016f4 <CpuMemCopy>
              *len = rxLength - 5;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <MbRtuReceivePacket+0xec>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	3b05      	subs	r3, #5
 8001da6:	7023      	strb	r3, [r4, #0]
              result = BLT_TRUE;
 8001da8:	e7cd      	b.n	8001d46 <MbRtuReceivePacket+0x7a>
  blt_bool result = BLT_FALSE;
 8001daa:	2600      	movs	r6, #0
 8001dac:	e7a0      	b.n	8001cf0 <MbRtuReceivePacket+0x24>
 8001dae:	bf00      	nop
 8001db0:	20000464 	.word	0x20000464
 8001db4:	20000460 	.word	0x20000460
 8001db8:	20000465 	.word	0x20000465
 8001dbc:	20000468 	.word	0x20000468
 8001dc0:	20000462 	.word	0x20000462
 8001dc4:	2000046b 	.word	0x2000046b

08001dc8 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8001dc8:	b508      	push	{r3, lr}
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8001dca:	f7ff fdd9 	bl	8001980 <FlashInit>
} /*** end of NvmInit ***/
 8001dce:	bd08      	pop	{r3, pc}

08001dd0 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8001dd0:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8001dd2:	f7ff fde1 	bl	8001998 <FlashWrite>
} /*** end of NvmWrite ***/
 8001dd6:	bd08      	pop	{r3, pc}

08001dd8 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8001dd8:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8001dda:	f7ff fe11 	bl	8001a00 <FlashErase>
} /*** end of NvmErase ***/
 8001dde:	bd08      	pop	{r3, pc}

08001de0 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8001de0:	b508      	push	{r3, lr}
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8001de2:	f7ff fe5d 	bl	8001aa0 <FlashVerifyChecksum>
#endif
} /*** end of NvmVerifyChecksum ***/
 8001de6:	bd08      	pop	{r3, pc}

08001de8 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8001de8:	b508      	push	{r3, lr}
  return FlashGetUserProgBaseAddress();
 8001dea:	f7ff fe8f 	bl	8001b0c <FlashGetUserProgBaseAddress>
} /*** end of NvmGetUserProgBaseAddress ***/
 8001dee:	bd08      	pop	{r3, pc}

08001df0 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8001df0:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8001df2:	f7ff fe25 	bl	8001a40 <FlashWriteChecksum>
 8001df6:	b900      	cbnz	r0, 8001dfa <NvmDone+0xa>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 8001df8:	bd08      	pop	{r3, pc}
  return FlashDone();
 8001dfa:	f7ff fe69 	bl	8001ad0 <FlashDone>
 8001dfe:	e7fb      	b.n	8001df8 <NvmDone+0x8>

08001e00 <TimerInit>:
**            inline functions.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8001e00:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <TimerInit+0x6c>)
 8001e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e0e:	f002 0201 	and.w	r2, r2, #1
 8001e12:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001e14:	9a01      	ldr	r2, [sp, #4]
   * used to realize the polling based millisecond time reference in this module.
   * Start by enabling the periperhal.
   */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
  /* The TIM1 peripheral clock is derived from PCLK2. Obtain the PCLK2 frequency. */
  pclk2_frequency = __LL_RCC_CALC_PCLK2_FREQ(SystemCoreClock, LL_RCC_GetAPB2Prescaler());
 8001e16:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <TimerInit+0x70>)
 8001e18:	6812      	ldr	r2, [r2, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e1a:	6899      	ldr	r1, [r3, #8]
 8001e1c:	f3c1 3142 	ubfx	r1, r1, #13, #3
 8001e20:	4814      	ldr	r0, [pc, #80]	; (8001e74 <TimerInit+0x74>)
 8001e22:	5c41      	ldrb	r1, [r0, r1]
 8001e24:	40ca      	lsrs	r2, r1
 8001e26:	689b      	ldr	r3, [r3, #8]
  /* According to the clock tree diagram in the RCC chapter of the reference manual,
   * the PCLK2-TIM frequency = PLCK2 * 1, when the APB2 prescaler is 1, otherwise it is
   * PCLK2 * 2.
   */
  tim_multiplier = (LL_RCC_GetAPB2Prescaler() == LL_RCC_APB2_DIV_1) ? 1U : 2U;
 8001e28:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8001e2c:	d11b      	bne.n	8001e66 <TimerInit+0x66>
 8001e2e:	2301      	movs	r3, #1
  /* Obtain the PCLK2-TIM frequency. */
  pclk2_tim_frequency = pclk2_frequency * tim_multiplier;
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the free running counter as a 16-bit upwards counter that runs at the
   * desired frequency and enable it.
   */
  TIM1->CR1 = TIM_CR1_CEN;
 8001e34:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <TimerInit+0x78>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	6011      	str	r1, [r2, #0]
  TIM1->ARR = 65535U;
 8001e3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e3e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIM1->PSC = (pclk2_tim_frequency / TIMER_COUNTER_FREQ_HZ) - 1U;
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	490e      	ldr	r1, [pc, #56]	; (8001e7c <TimerInit+0x7c>)
 8001e44:	fba1 1303 	umull	r1, r3, r1, r3
 8001e48:	09db      	lsrs	r3, r3, #7
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6293      	str	r3, [r2, #40]	; 0x28
  /* Generate an update event to reload the prescaler immediately. */
  TIM1->EGR |= TIM_EGR_UG;
 8001e4e:	6953      	ldr	r3, [r2, #20]
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6153      	str	r3, [r2, #20]
  /* Initialize locals. */
  millisecond_counter = 0;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <TimerInit+0x80>)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	6019      	str	r1, [r3, #0]
  free_running_counter_last = (blt_int16u)TIM1->CNT;
 8001e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <TimerInit+0x84>)
 8001e60:	801a      	strh	r2, [r3, #0]
} /*** end of TimerInit ***/
 8001e62:	b002      	add	sp, #8
 8001e64:	4770      	bx	lr
  tim_multiplier = (LL_RCC_GetAPB2Prescaler() == LL_RCC_APB2_DIV_1) ? 1U : 2U;
 8001e66:	2302      	movs	r3, #2
 8001e68:	e7e2      	b.n	8001e30 <TimerInit+0x30>
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	20000000 	.word	0x20000000
 8001e74:	080025f8 	.word	0x080025f8
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001e80:	20000578 	.word	0x20000578
 8001e84:	20000576 	.word	0x20000576

08001e88 <TimerReset>:
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <TimerReset+0x28>)
 8001e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8001e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
  LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_TIM1);
  /* Set the SysTick's registers back into the default reset value. Note that this module
   * does not use the SysTick, but HAL_Init() did initialize it.
   */
  SysTick->CTRL = 0;
 8001ea2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  SysTick->LOAD = 0;
 8001eaa:	615a      	str	r2, [r3, #20]
  SysTick->VAL = 0;
 8001eac:	619a      	str	r2, [r3, #24]
} /* end of TimerReset */
 8001eae:	4770      	bx	lr
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <TimerUpdate>:
  blt_int16u free_running_counter_now;
  blt_int16u delta_counts;
  blt_int16u ms_counts;

  /* Get the current value of the free running counter. */
  free_running_counter_now = (blt_int16u)TIM1->CNT;
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <TimerUpdate+0x40>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	b29b      	uxth	r3, r3
  /* Calculate the number of counts that passed since the detection of the last
   * millisecond event. Note that this calculation also works, in case the free running
   * counter overflowed, thanks to integer math.
   */
  delta_counts = free_running_counter_now - free_running_counter_last;
 8001eba:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <TimerUpdate+0x44>)
 8001ebc:	8811      	ldrh	r1, [r2, #0]
 8001ebe:	1a5b      	subs	r3, r3, r1
 8001ec0:	b29b      	uxth	r3, r3

  /* Did one or more milliseconds pass since the last event? */
  if (delta_counts >= TIMER_COUNTS_PER_MS)
 8001ec2:	2b63      	cmp	r3, #99	; 0x63
 8001ec4:	d915      	bls.n	8001ef2 <TimerUpdate+0x3e>
{
 8001ec6:	b410      	push	{r4}
  {
    /* Calculate how many milliseconds passed. */
    ms_counts = delta_counts / TIMER_COUNTS_PER_MS;
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <TimerUpdate+0x48>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	095a      	lsrs	r2, r3, #5
    /* Update the millisecond counter. */
    millisecond_counter += ms_counts;
 8001ed0:	4c0b      	ldr	r4, [pc, #44]	; (8001f00 <TimerUpdate+0x4c>)
 8001ed2:	6820      	ldr	r0, [r4, #0]
 8001ed4:	eb00 1053 	add.w	r0, r0, r3, lsr #5
 8001ed8:	6020      	str	r0, [r4, #0]
    /* Store the counter value of the last millisecond event, to detect the next one. */
    free_running_counter_last += (ms_counts * TIMER_COUNTS_PER_MS);
 8001eda:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8001ede:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ee2:	009a      	lsls	r2, r3, #2
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	4411      	add	r1, r2
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <TimerUpdate+0x44>)
 8001eea:	8019      	strh	r1, [r3, #0]
  }
} /*** end of TimerUpdate ***/
 8001eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	4770      	bx	lr
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	20000576 	.word	0x20000576
 8001efc:	51eb851f 	.word	0x51eb851f
 8001f00:	20000578 	.word	0x20000578

08001f04 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8001f04:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8001f06:	f7ff ffd5 	bl	8001eb4 <TimerUpdate>

  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 8001f0a:	4b01      	ldr	r3, [pc, #4]	; (8001f10 <TimerGet+0xc>)
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	bd08      	pop	{r3, pc}
 8001f10:	20000578 	.word	0x20000578

08001f14 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8001f14:	b508      	push	{r3, lr}
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8001f16:	f7ff fff5 	bl	8001f04 <TimerGet>
} /*** end of HAL_GetTick ***/
 8001f1a:	bd08      	pop	{r3, pc}

08001f1c <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8001f1c:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8001f1e:	f000 f8c3 	bl	80020a8 <CopService>
  for (;;)
 8001f22:	e7fc      	b.n	8001f1e <AssertFailure+0x2>

08001f24 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8001f24:	b508      	push	{r3, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8001f26:	f000 f8b5 	bl	8002094 <ComIsConnected>
 8001f2a:	2801      	cmp	r0, #1
 8001f2c:	d003      	beq.n	8001f36 <BackDoorCheck+0x12>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <BackDoorCheck+0x38>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d000      	beq.n	8001f38 <BackDoorCheck+0x14>
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8001f36:	bd08      	pop	{r3, pc}
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8001f38:	f7ff ffe4 	bl	8001f04 <TimerGet>
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <BackDoorCheck+0x3c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <BackDoorCheck+0x40>)
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001f4a:	4298      	cmp	r0, r3
 8001f4c:	d3f3      	bcc.n	8001f36 <BackDoorCheck+0x12>
      backdoorOpen = BLT_FALSE;
 8001f4e:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <BackDoorCheck+0x38>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
        CpuStartUserProgram();
 8001f54:	f7ff fbae 	bl	80016b4 <CpuStartUserProgram>
 8001f58:	e7ed      	b.n	8001f36 <BackDoorCheck+0x12>
 8001f5a:	bf00      	nop
 8001f5c:	20000580 	.word	0x20000580
 8001f60:	2000057c 	.word	0x2000057c
 8001f64:	20000584 	.word	0x20000584

08001f68 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8001f68:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <BackDoorRestartTimer+0x18>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d000      	beq.n	8001f74 <BackDoorRestartTimer+0xc>
  {
    backdoorOpenTime = TimerGet();
  }
} /*** end of BackDoorRestartTimer ***/
 8001f72:	bd08      	pop	{r3, pc}
    backdoorOpenTime = TimerGet();
 8001f74:	f7ff ffc6 	bl	8001f04 <TimerGet>
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <BackDoorRestartTimer+0x1c>)
 8001f7a:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorRestartTimer ***/
 8001f7c:	e7f9      	b.n	8001f72 <BackDoorRestartTimer+0xa>
 8001f7e:	bf00      	nop
 8001f80:	20000580 	.word	0x20000580
 8001f84:	20000584 	.word	0x20000584

08001f88 <BackDoorInit>:
{
 8001f88:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <BackDoorInit+0x14>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8001f90:	f7ff ffea 	bl	8001f68 <BackDoorRestartTimer>
  BackDoorCheck();
 8001f94:	f7ff ffc6 	bl	8001f24 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8001f98:	bd08      	pop	{r3, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000580 	.word	0x20000580

08001fa0 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8001fa0:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 8001fa2:	f7ff fb83 	bl	80016ac <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8001fa6:	f000 f87b 	bl	80020a0 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8001faa:	f7ff ff29 	bl	8001e00 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8001fae:	f7ff ff0b 	bl	8001dc8 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8001fb2:	f000 f80d 	bl	8001fd0 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8001fb6:	f7ff ffe7 	bl	8001f88 <BackDoorInit>
} /*** end of BootInit ***/
 8001fba:	bd08      	pop	{r3, pc}

08001fbc <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8001fbc:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 8001fbe:	f000 f873 	bl	80020a8 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8001fc2:	f7ff ff77 	bl	8001eb4 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8001fc6:	f000 f80f 	bl	8001fe8 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8001fca:	f7ff ffab 	bl	8001f24 <BackDoorCheck>
} /*** end of BootTask ***/
 8001fce:	bd08      	pop	{r3, pc}

08001fd0 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8001fd0:	b508      	push	{r3, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 8001fd2:	f000 fa45 	bl	8002460 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
#endif
#if (BOOT_COM_MBRTU_ENABLE > 0)
  /* initialize the Modbus RTU interface */
  MbRtuInit();
 8001fd6:	f7ff fe31 	bl	8001c3c <MbRtuInit>
  /* set it as active */
  comActiveInterface = COM_IF_MBRTU;
 8001fda:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <ComInit+0x14>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8001fe0:	bd08      	pop	{r3, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000000c 	.word	0x2000000c

08001fe8 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8001fe8:	b500      	push	{lr}
 8001fea:	b083      	sub	sp, #12
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_MBRTU_ENABLE > 0)
  if (MbRtuReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8001fec:	f10d 0107 	add.w	r1, sp, #7
 8001ff0:	4808      	ldr	r0, [pc, #32]	; (8002014 <ComTask+0x2c>)
 8001ff2:	f7ff fe6b 	bl	8001ccc <MbRtuReceivePacket>
 8001ff6:	2801      	cmp	r0, #1
 8001ff8:	d002      	beq.n	8002000 <ComTask+0x18>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8001ffa:	b003      	add	sp, #12
 8001ffc:	f85d fb04 	ldr.w	pc, [sp], #4
    comActiveInterface = COM_IF_MBRTU;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <ComTask+0x30>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8002006:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800200a:	4802      	ldr	r0, [pc, #8]	; (8002014 <ComTask+0x2c>)
 800200c:	f000 fa4a 	bl	80024a4 <XcpPacketReceived>
} /*** end of ComTask ***/
 8002010:	e7f3      	b.n	8001ffa <ComTask+0x12>
 8002012:	bf00      	nop
 8002014:	20000588 	.word	0x20000588
 8002018:	2000000c 	.word	0x2000000c

0800201c <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 800201c:	4770      	bx	lr
	...

08002020 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8002020:	b508      	push	{r3, lr}
#endif
#if (BOOT_COM_MBRTU_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_MBRTU)
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <ComTransmitPacket+0x18>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d002      	beq.n	8002030 <ComTransmitPacket+0x10>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 800202a:	f000 fa33 	bl	8002494 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 800202e:	bd08      	pop	{r3, pc}
    MbRtuTransmitPacket(data, (blt_int8u)len);
 8002030:	b2c9      	uxtb	r1, r1
 8002032:	f7ff fdaf 	bl	8001b94 <MbRtuTransmitPacket>
 8002036:	e7f8      	b.n	800202a <ComTransmitPacket+0xa>
 8002038:	2000000c 	.word	0x2000000c

0800203c <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <ComGetActiveInterfaceMaxRxLen+0x28>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d009      	beq.n	8002058 <ComGetActiveInterfaceMaxRxLen+0x1c>
 8002044:	d905      	bls.n	8002052 <ComGetActiveInterfaceMaxRxLen+0x16>
 8002046:	3b02      	subs	r3, #2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d908      	bls.n	8002060 <ComGetActiveInterfaceMaxRxLen+0x24>
    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
      break;

    default:
      result = BOOT_COM_RX_MAX_DATA;
 800204e:	2081      	movs	r0, #129	; 0x81
 8002050:	4770      	bx	lr
  switch (comActiveInterface)
 8002052:	b91b      	cbnz	r3, 800205c <ComGetActiveInterfaceMaxRxLen+0x20>
 8002054:	2000      	movs	r0, #0
 8002056:	4770      	bx	lr
      result = BOOT_COM_MBRTU_RX_MAX_DATA;
 8002058:	2081      	movs	r0, #129	; 0x81
 800205a:	4770      	bx	lr
      result = BOOT_COM_RX_MAX_DATA;
 800205c:	2081      	movs	r0, #129	; 0x81
 800205e:	4770      	bx	lr
  switch (comActiveInterface)
 8002060:	2000      	movs	r0, #0
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8002062:	4770      	bx	lr
 8002064:	2000000c 	.word	0x2000000c

08002068 <ComGetActiveInterfaceMaxTxLen>:
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <ComGetActiveInterfaceMaxTxLen+0x28>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d009      	beq.n	8002084 <ComGetActiveInterfaceMaxTxLen+0x1c>
 8002070:	d905      	bls.n	800207e <ComGetActiveInterfaceMaxTxLen+0x16>
 8002072:	3b02      	subs	r3, #2
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d908      	bls.n	800208c <ComGetActiveInterfaceMaxTxLen+0x24>
    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
      break;

    default:
      result = BOOT_COM_TX_MAX_DATA;
 800207a:	2081      	movs	r0, #129	; 0x81
 800207c:	4770      	bx	lr
  switch (comActiveInterface)
 800207e:	b91b      	cbnz	r3, 8002088 <ComGetActiveInterfaceMaxTxLen+0x20>
 8002080:	2000      	movs	r0, #0
 8002082:	4770      	bx	lr
      result = BOOT_COM_MBRTU_TX_MAX_DATA;
 8002084:	2081      	movs	r0, #129	; 0x81
 8002086:	4770      	bx	lr
      result = BOOT_COM_TX_MAX_DATA;
 8002088:	2081      	movs	r0, #129	; 0x81
 800208a:	4770      	bx	lr
  switch (comActiveInterface)
 800208c:	2000      	movs	r0, #0
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 800208e:	4770      	bx	lr
 8002090:	2000000c 	.word	0x2000000c

08002094 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8002094:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8002096:	f000 f9f5 	bl	8002484 <XcpIsConnected>
 800209a:	b100      	cbz	r0, 800209e <ComIsConnected+0xa>
  {
    result = BLT_TRUE;
 800209c:	2001      	movs	r0, #1
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 800209e:	bd08      	pop	{r3, pc}

080020a0 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 80020a0:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 80020a2:	f7fe fa44 	bl	800052e <CopInitHook>
#endif
} /*** end of CopInit ***/
 80020a6:	bd08      	pop	{r3, pc}

080020a8 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 80020a8:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 80020aa:	f7fe fa45 	bl	8000538 <CopServiceHook>
#endif
} /*** end of CopService ***/
 80020ae:	bd08      	pop	{r3, pc}

080020b0 <MbRtuCrcCalculate>:
** \param     len Number of bytes in the data array.
** \return    the 16-bit CRC value.
**
****************************************************************************************/
blt_int16u MbRtuCrcCalculate(blt_int8u const *data, blt_int16u len)
{
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	4604      	mov	r4, r0
  blt_int8u locCRCHi = 0xFF ; /* high byte of CRC initialized */
  blt_int8u locCRCLo = 0xFF ; /* low byte of CRC initialized */
 80020b4:	25ff      	movs	r5, #255	; 0xff
  blt_int8u locCRCHi = 0xFF ; /* high byte of CRC initialized */
 80020b6:	462e      	mov	r6, r5
  blt_int16u idx; /* will index into CRC lookup table */

  /* loop through message buffer. */
  while (len--)
 80020b8:	e00c      	b.n	80020d4 <MbRtuCrcCalculate+0x24>
  {
    /* keep the watchdog happy. */
    CopService();
 80020ba:	f7ff fff5 	bl	80020a8 <CopService>
    /* calculate the CRC. */
    idx = locCRCLo ^ *data++ ;
 80020be:	4620      	mov	r0, r4
 80020c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80020c4:	406b      	eors	r3, r5
    locCRCLo = locCRCHi ^ CRCHi[idx] ;
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <MbRtuCrcCalculate+0x34>)
 80020c8:	5cd5      	ldrb	r5, [r2, r3]
 80020ca:	4075      	eors	r5, r6
    locCRCHi = CRCLo[idx] ;
 80020cc:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <MbRtuCrcCalculate+0x38>)
 80020ce:	5cd6      	ldrb	r6, [r2, r3]
  while (len--)
 80020d0:	4639      	mov	r1, r7
    idx = locCRCLo ^ *data++ ;
 80020d2:	4604      	mov	r4, r0
  while (len--)
 80020d4:	1e4b      	subs	r3, r1, #1
 80020d6:	b29f      	uxth	r7, r3
 80020d8:	2900      	cmp	r1, #0
 80020da:	d1ee      	bne.n	80020ba <MbRtuCrcCalculate+0xa>
  }
  /* return the result formatted as 16-bit unsigned. */
  return (locCRCHi << 8 | locCRCLo) ;
} /*** end of MbRtuCrcCalculate ***/
 80020dc:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
 80020e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	080026cc 	.word	0x080026cc
 80020e8:	080027cc 	.word	0x080027cc

080020ec <MbRtuDelay>:
** \param     delay_us Number of microseconds to delay.
** \return    none.
**
****************************************************************************************/
void MbRtuDelay(blt_int16u delay_us)
{
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4605      	mov	r5, r0
   * tick equals 10 us. The result is rounded up to the next 10 us.
   */
  delayTimeTicks = (blt_int16u)(delay_us + (9U) / 10U);

  /* wait for the delay time to expire. */
  startTimeTicks = MbRtuFreeRunningCounterGet();
 80020f0:	f7ff fd9e 	bl	8001c30 <MbRtuFreeRunningCounterGet>
 80020f4:	4604      	mov	r4, r0
  do
  {
    /* service the watchdog. */
    CopService();
 80020f6:	f7ff ffd7 	bl	80020a8 <CopService>
    /* get the current value of the free running counter. */
    currentTimeTicks = MbRtuFreeRunningCounterGet();
 80020fa:	f7ff fd99 	bl	8001c30 <MbRtuFreeRunningCounterGet>
    /* calculate the number of ticks that elapsed since the start. Note that this
     * calculation works, even if the free running counter overflowed.
     */
    deltaTimeTicks = currentTimeTicks - startTimeTicks;
 80020fe:	1b03      	subs	r3, r0, r4
 8002100:	b29b      	uxth	r3, r3
  }
  while (deltaTimeTicks < delayTimeTicks);
 8002102:	429d      	cmp	r5, r3
 8002104:	d8f7      	bhi.n	80020f6 <MbRtuDelay+0xa>
} /*** end of MbRtuDelay ***/
 8002106:	bd38      	pop	{r3, r4, r5, pc}

08002108 <XcpProtectResources>:
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
  xcpInfo.protection = 0;
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <XcpProtectResources+0xc>)
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	2000060c 	.word	0x2000060c

08002118 <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <XcpSetCtoError+0x10>)
 800211a:	22fe      	movs	r2, #254	; 0xfe
 800211c:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
 800211e:	7058      	strb	r0, [r3, #1]
  xcpInfo.ctoLen = 2;
 8002120:	2202      	movs	r2, #2
 8002122:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpSetCtoError ***/
 8002126:	4770      	bx	lr
 8002128:	2000060c 	.word	0x2000060c

0800212c <XcpGetOrderedLong>:
static blt_int32u XcpGetOrderedLong(blt_int8u const * data)
{
  blt_int32u result = 0;

#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  result |= (blt_int32u)data[0];
 800212c:	7803      	ldrb	r3, [r0, #0]
  result |= (blt_int32u)((blt_int32u)data[1] << 8);
 800212e:	7842      	ldrb	r2, [r0, #1]
 8002130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  result |= (blt_int32u)((blt_int32u)data[2] << 16);
 8002134:	7882      	ldrb	r2, [r0, #2]
 8002136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  result |= (blt_int32u)((blt_int32u)data[3] << 24);
 800213a:	78c0      	ldrb	r0, [r0, #3]
  result |= (blt_int32u)((blt_int32u)data[1] << 16);
  result |= (blt_int32u)((blt_int32u)data[0] << 24);
#endif
  /* Give the result back to the caller. */
  return result;
} /*** end of XcpGetOrderedLong ***/
 800213c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8002140:	4770      	bx	lr

08002142 <XcpSetOrderedLong>:
**
****************************************************************************************/
static void XcpSetOrderedLong(blt_int32u value, blt_int8u *data)
{
#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  data[0] = (blt_int8u) value;
 8002142:	7008      	strb	r0, [r1, #0]
  data[1] = (blt_int8u)(value >>  8);
 8002144:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002148:	704b      	strb	r3, [r1, #1]
  data[2] = (blt_int8u)(value >> 16);
 800214a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800214e:	708b      	strb	r3, [r1, #2]
  data[3] = (blt_int8u)(value >> 24);
 8002150:	0e00      	lsrs	r0, r0, #24
 8002152:	70c8      	strb	r0, [r1, #3]
  data[3] = (blt_int8u) value;
  data[2] = (blt_int8u)(value >>  8);
  data[1] = (blt_int8u)(value >> 16);
  data[0] = (blt_int8u)(value >> 24);
#endif
} /*** end of XcpSetOrderedLong ***/
 8002154:	4770      	bx	lr
	...

08002158 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8002158:	b510      	push	{r4, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 800215a:	4c06      	ldr	r4, [pc, #24]	; (8002174 <XcpCmdDisconnect+0x1c>)
 800215c:	2300      	movs	r3, #0
 800215e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81

  /* enable resource protection */
  XcpProtectResources();
 8002162:	f7ff ffd1 	bl	8002108 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002166:	23ff      	movs	r3, #255	; 0xff
 8002168:	7023      	strb	r3, [r4, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800216a:	2301      	movs	r3, #1
 800216c:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
} /*** end of XcpCmdDisconnect ***/
 8002170:	bd10      	pop	{r4, pc}
 8002172:	bf00      	nop
 8002174:	2000060c 	.word	0x2000060c

08002178 <XcpCmdGetStatus>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <XcpCmdGetStatus+0x20>)
 800217a:	22ff      	movs	r2, #255	; 0xff
 800217c:	701a      	strb	r2, [r3, #0]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 800217e:	2200      	movs	r2, #0
 8002180:	705a      	strb	r2, [r3, #1]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8002182:	f893 1082 	ldrb.w	r1, [r3, #130]	; 0x82
 8002186:	7099      	strb	r1, [r3, #2]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 8002188:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[4] = 0;
 800218a:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 800218c:	715a      	strb	r2, [r3, #5]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 800218e:	2206      	movs	r2, #6
 8002190:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetStatus ***/
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	2000060c 	.word	0x2000060c

0800219c <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 800219c:	b508      	push	{r3, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 800219e:	2000      	movs	r0, #0
 80021a0:	f7ff ffba 	bl	8002118 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 80021a4:	bd08      	pop	{r3, pc}
	...

080021a8 <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 80021a8:	b510      	push	{r4, lr}
  
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80021aa:	4c09      	ldr	r4, [pc, #36]	; (80021d0 <XcpCmdGetId+0x28>)
 80021ac:	23ff      	movs	r3, #255	; 0xff
 80021ae:	7023      	strb	r3, [r4, #0]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <XcpCmdGetId+0x2c>)
 80021b2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	7063      	strb	r3, [r4, #1]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 80021ba:	70a3      	strb	r3, [r4, #2]
  xcpInfo.ctoData[3] = 0;
 80021bc:	70e3      	strb	r3, [r4, #3]

  /* store station id length (excl. null termination) for response packet */
  stationIdLen = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
  XcpSetOrderedLong(stationIdLen, &xcpInfo.ctoData[4]);
 80021be:	1d21      	adds	r1, r4, #4
 80021c0:	2007      	movs	r0, #7
 80021c2:	f7ff ffbe 	bl	8002142 <XcpSetOrderedLong>

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80021c6:	2308      	movs	r3, #8
 80021c8:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
} /*** end of XcpCmdGetId ***/
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	bf00      	nop
 80021d0:	2000060c 	.word	0x2000060c
 80021d4:	080028cc 	.word	0x080028cc

080021d8 <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 80021d8:	b510      	push	{r4, lr}
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80021da:	4c06      	ldr	r4, [pc, #24]	; (80021f4 <XcpCmdSetMta+0x1c>)
 80021dc:	23ff      	movs	r3, #255	; 0xff
 80021de:	7023      	strb	r3, [r4, #0]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 80021e0:	3004      	adds	r0, #4
 80021e2:	f7ff ffa3 	bl	800212c <XcpGetOrderedLong>
 80021e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
} /*** end of XcpCmdSetMta ***/
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	bf00      	nop
 80021f4:	2000060c 	.word	0x2000060c

080021f8 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 80021f8:	b508      	push	{r3, lr}
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 80021fa:	2031      	movs	r0, #49	; 0x31
 80021fc:	f7ff ff8c 	bl	8002118 <XcpSetCtoError>
  return;
} /*** end of XcpCmdProgramPrepare ***/
 8002200:	bd08      	pop	{r3, pc}
	...

08002204 <XcpCmdProgramStart>:
{
 8002204:	b538      	push	{r3, r4, r5, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002206:	4c08      	ldr	r4, [pc, #32]	; (8002228 <XcpCmdProgramStart+0x24>)
 8002208:	23ff      	movs	r3, #255	; 0xff
 800220a:	7023      	strb	r3, [r4, #0]
  xcpInfo.ctoData[1] = 0;
 800220c:	2500      	movs	r5, #0
 800220e:	7065      	strb	r5, [r4, #1]
  xcpInfo.ctoData[2] = 0;
 8002210:	70a5      	strb	r5, [r4, #2]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8002212:	f7ff ff13 	bl	800203c <ComGetActiveInterfaceMaxRxLen>
 8002216:	70e0      	strb	r0, [r4, #3]
  xcpInfo.ctoData[4] = 0;
 8002218:	7125      	strb	r5, [r4, #4]
  xcpInfo.ctoData[5] = 0;
 800221a:	7165      	strb	r5, [r4, #5]
  xcpInfo.ctoData[6] = 0;
 800221c:	71a5      	strb	r5, [r4, #6]
  xcpInfo.ctoLen = 7;
 800221e:	2307      	movs	r3, #7
 8002220:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
} /*** end of XcpCmdProgramStart ***/
 8002224:	bd38      	pop	{r3, r4, r5, pc}
 8002226:	bf00      	nop
 8002228:	2000060c 	.word	0x2000060c

0800222c <XcpCmdConnect>:
{
 800222c:	b538      	push	{r3, r4, r5, lr}
  XcpProtectResources();
 800222e:	f7ff ff6b 	bl	8002108 <XcpProtectResources>
  xcpInfo.connected = 1;
 8002232:	4c0f      	ldr	r4, [pc, #60]	; (8002270 <XcpCmdConnect+0x44>)
 8002234:	2501      	movs	r5, #1
 8002236:	f884 5081 	strb.w	r5, [r4, #129]	; 0x81
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800223a:	23ff      	movs	r3, #255	; 0xff
 800223c:	7023      	strb	r3, [r4, #0]
  xcpInfo.ctoData[1] = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	7063      	strb	r3, [r4, #1]
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8002242:	2210      	movs	r2, #16
 8002244:	7062      	strb	r2, [r4, #1]
  xcpInfo.ctoData[2] = 0;
 8002246:	70a3      	strb	r3, [r4, #2]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8002248:	f7ff fef8 	bl	800203c <ComGetActiveInterfaceMaxRxLen>
 800224c:	70e0      	strb	r0, [r4, #3]
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 800224e:	f7ff ff0b 	bl	8002068 <ComGetActiveInterfaceMaxTxLen>
 8002252:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8002254:	f7ff ff08 	bl	8002068 <ComGetActiveInterfaceMaxTxLen>
 8002258:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800225c:	7160      	strb	r0, [r4, #5]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 800225e:	71a5      	strb	r5, [r4, #6]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8002260:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoLen = 8;
 8002262:	2308      	movs	r3, #8
 8002264:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  NvmInit();
 8002268:	f7ff fdae 	bl	8001dc8 <NvmInit>
} /*** end of XcpCmdConnect ***/
 800226c:	bd38      	pop	{r3, r4, r5, pc}
 800226e:	bf00      	nop
 8002270:	2000060c 	.word	0x2000060c

08002274 <XcpCmdUpload>:
{
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8002278:	f7ff fee0 	bl	800203c <ComGetActiveInterfaceMaxRxLen>
 800227c:	7862      	ldrb	r2, [r4, #1]
 800227e:	4290      	cmp	r0, r2
 8002280:	d912      	bls.n	80022a8 <XcpCmdUpload+0x34>
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8002282:	4d0b      	ldr	r5, [pc, #44]	; (80022b0 <XcpCmdUpload+0x3c>)
 8002284:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8002288:	1c68      	adds	r0, r5, #1
 800228a:	f7ff fa33 	bl	80016f4 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800228e:	23ff      	movs	r3, #255	; 0xff
 8002290:	702b      	strb	r3, [r5, #0]
  xcpInfo.mta += data[1];
 8002292:	7862      	ldrb	r2, [r4, #1]
 8002294:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8002298:	4413      	add	r3, r2
 800229a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  xcpInfo.ctoLen = data[1]+1;
 800229e:	7863      	ldrb	r3, [r4, #1]
 80022a0:	3301      	adds	r3, #1
 80022a2:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
} /*** end of XcpCmdUpload ***/
 80022a6:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80022a8:	2022      	movs	r0, #34	; 0x22
 80022aa:	f7ff ff35 	bl	8002118 <XcpSetCtoError>
    return;
 80022ae:	e7fa      	b.n	80022a6 <XcpCmdUpload+0x32>
 80022b0:	2000060c 	.word	0x2000060c

080022b4 <XcpCmdShortUpload>:
{
 80022b4:	b538      	push	{r3, r4, r5, lr}
 80022b6:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80022b8:	f7ff fec0 	bl	800203c <ComGetActiveInterfaceMaxRxLen>
 80022bc:	7863      	ldrb	r3, [r4, #1]
 80022be:	4298      	cmp	r0, r3
 80022c0:	d917      	bls.n	80022f2 <XcpCmdShortUpload+0x3e>
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 80022c2:	1d20      	adds	r0, r4, #4
 80022c4:	f7ff ff32 	bl	800212c <XcpGetOrderedLong>
 80022c8:	4601      	mov	r1, r0
 80022ca:	4d0c      	ldr	r5, [pc, #48]	; (80022fc <XcpCmdShortUpload+0x48>)
 80022cc:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 80022d0:	7862      	ldrb	r2, [r4, #1]
 80022d2:	1c68      	adds	r0, r5, #1
 80022d4:	f7ff fa0e 	bl	80016f4 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80022d8:	23ff      	movs	r3, #255	; 0xff
 80022da:	702b      	strb	r3, [r5, #0]
  xcpInfo.mta += data[1];
 80022dc:	7862      	ldrb	r2, [r4, #1]
 80022de:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80022e2:	4413      	add	r3, r2
 80022e4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  xcpInfo.ctoLen = data[1]+1;
 80022e8:	7863      	ldrb	r3, [r4, #1]
 80022ea:	3301      	adds	r3, #1
 80022ec:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
} /*** end of XcpCmdShortUpload ***/
 80022f0:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80022f2:	2022      	movs	r0, #34	; 0x22
 80022f4:	f7ff ff10 	bl	8002118 <XcpSetCtoError>
    return;
 80022f8:	e7fa      	b.n	80022f0 <XcpCmdShortUpload+0x3c>
 80022fa:	bf00      	nop
 80022fc:	2000060c 	.word	0x2000060c

08002300 <XcpComputeChecksum>:
{
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	4605      	mov	r5, r0
 8002304:	4617      	mov	r7, r2
  blt_int8u cs = 0;
 8002306:	2400      	movs	r4, #0
  while (length-- > 0)
 8002308:	e006      	b.n	8002318 <XcpComputeChecksum+0x18>
    cs += *((blt_int8u *)(blt_addr)address);
 800230a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800230e:	441c      	add	r4, r3
 8002310:	b2e4      	uxtb	r4, r4
    CopService();
 8002312:	f7ff fec9 	bl	80020a8 <CopService>
  while (length-- > 0)
 8002316:	4631      	mov	r1, r6
 8002318:	1e4e      	subs	r6, r1, #1
 800231a:	2900      	cmp	r1, #0
 800231c:	d1f5      	bne.n	800230a <XcpComputeChecksum+0xa>
  *checksum = cs;
 800231e:	603c      	str	r4, [r7, #0]
} /*** end of XcpComputeChecksum ***/
 8002320:	2001      	movs	r0, #1
 8002322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002324 <XcpCmdBuildCheckSum>:
{
 8002324:	b530      	push	{r4, r5, lr}
 8002326:	b083      	sub	sp, #12
  blt_int32u checksumVal = 0;
 8002328:	2500      	movs	r5, #0
 800232a:	9501      	str	r5, [sp, #4]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800232c:	4c0b      	ldr	r4, [pc, #44]	; (800235c <XcpCmdBuildCheckSum+0x38>)
 800232e:	23ff      	movs	r3, #255	; 0xff
 8002330:	7023      	strb	r3, [r4, #0]
  checksumLen = XcpGetOrderedLong(&data[4]);
 8002332:	3004      	adds	r0, #4
 8002334:	f7ff fefa 	bl	800212c <XcpGetOrderedLong>
 8002338:	4601      	mov	r1, r0
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 800233a:	aa01      	add	r2, sp, #4
 800233c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002340:	f7ff ffde 	bl	8002300 <XcpComputeChecksum>
  xcpInfo.ctoData[1] = checksumType;
 8002344:	7060      	strb	r0, [r4, #1]
  XcpSetOrderedLong(checksumVal, &xcpInfo.ctoData[4]);
 8002346:	1d21      	adds	r1, r4, #4
 8002348:	9801      	ldr	r0, [sp, #4]
 800234a:	f7ff fefa 	bl	8002142 <XcpSetOrderedLong>
  xcpInfo.ctoData[2] = 0;
 800234e:	70a5      	strb	r5, [r4, #2]
  xcpInfo.ctoData[3] = 0;
 8002350:	70e5      	strb	r5, [r4, #3]
  xcpInfo.ctoLen = 8;
 8002352:	2308      	movs	r3, #8
 8002354:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
} /*** end of XcpCmdBuildCheckSum ***/
 8002358:	b003      	add	sp, #12
 800235a:	bd30      	pop	{r4, r5, pc}
 800235c:	2000060c 	.word	0x2000060c

08002360 <XcpCmdProgramMax>:
{
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	4604      	mov	r4, r0
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <XcpCmdProgramMax+0x40>)
 8002366:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800236a:	f7ff fe67 	bl	800203c <ComGetActiveInterfaceMaxRxLen>
 800236e:	1c62      	adds	r2, r4, #1
 8002370:	1e41      	subs	r1, r0, #1
 8002372:	4628      	mov	r0, r5
 8002374:	f7ff fd2c 	bl	8001dd0 <NvmWrite>
 8002378:	b170      	cbz	r0, 8002398 <XcpCmdProgramMax+0x38>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800237a:	4c09      	ldr	r4, [pc, #36]	; (80023a0 <XcpCmdProgramMax+0x40>)
 800237c:	23ff      	movs	r3, #255	; 0xff
 800237e:	7023      	strb	r3, [r4, #0]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8002380:	f7ff fe5c 	bl	800203c <ComGetActiveInterfaceMaxRxLen>
 8002384:	3801      	subs	r0, #1
 8002386:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800238a:	4403      	add	r3, r0
 800238c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  xcpInfo.ctoLen = 1;
 8002390:	2301      	movs	r3, #1
 8002392:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
} /*** end of XcpCmdProgramMax ***/
 8002396:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8002398:	2031      	movs	r0, #49	; 0x31
 800239a:	f7ff febd 	bl	8002118 <XcpSetCtoError>
    return;
 800239e:	e7fa      	b.n	8002396 <XcpCmdProgramMax+0x36>
 80023a0:	2000060c 	.word	0x2000060c

080023a4 <XcpCmdProgram>:
{
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 80023a8:	f7ff fe48 	bl	800203c <ComGetActiveInterfaceMaxRxLen>
 80023ac:	3801      	subs	r0, #1
 80023ae:	7863      	ldrb	r3, [r4, #1]
 80023b0:	4298      	cmp	r0, r3
 80023b2:	dd16      	ble.n	80023e2 <XcpCmdProgram+0x3e>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <XcpCmdProgram+0x60>)
 80023b6:	22ff      	movs	r2, #255	; 0xff
 80023b8:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoLen = 1;
 80023ba:	2201      	movs	r2, #1
 80023bc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  if (data[1] == 0)
 80023c0:	7861      	ldrb	r1, [r4, #1]
 80023c2:	b191      	cbz	r1, 80023ea <XcpCmdProgram+0x46>
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 80023c4:	1ca2      	adds	r2, r4, #2
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <XcpCmdProgram+0x60>)
 80023c8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80023cc:	f7ff fd00 	bl	8001dd0 <NvmWrite>
 80023d0:	b198      	cbz	r0, 80023fa <XcpCmdProgram+0x56>
  xcpInfo.mta += data[1];
 80023d2:	7861      	ldrb	r1, [r4, #1]
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <XcpCmdProgram+0x60>)
 80023d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023da:	440b      	add	r3, r1
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
} /*** end of XcpCmdProgram ***/
 80023e0:	bd10      	pop	{r4, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80023e2:	2022      	movs	r0, #34	; 0x22
 80023e4:	f7ff fe98 	bl	8002118 <XcpSetCtoError>
    return;
 80023e8:	e7fa      	b.n	80023e0 <XcpCmdProgram+0x3c>
    if (NvmDone() == BLT_FALSE)
 80023ea:	f7ff fd01 	bl	8001df0 <NvmDone>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d1f6      	bne.n	80023e0 <XcpCmdProgram+0x3c>
      XcpSetCtoError(XCP_ERR_GENERIC);
 80023f2:	2031      	movs	r0, #49	; 0x31
 80023f4:	f7ff fe90 	bl	8002118 <XcpSetCtoError>
    return;
 80023f8:	e7f2      	b.n	80023e0 <XcpCmdProgram+0x3c>
    XcpSetCtoError(XCP_ERR_GENERIC);
 80023fa:	2031      	movs	r0, #49	; 0x31
 80023fc:	f7ff fe8c 	bl	8002118 <XcpSetCtoError>
    return;
 8002400:	e7ee      	b.n	80023e0 <XcpCmdProgram+0x3c>
 8002402:	bf00      	nop
 8002404:	2000060c 	.word	0x2000060c

08002408 <XcpCmdProgramClear>:
{
 8002408:	b510      	push	{r4, lr}
  eraseAddr = xcpInfo.mta;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <XcpCmdProgramClear+0x30>)
 800240c:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
  eraseLen = XcpGetOrderedLong(&data[4]);
 8002410:	3004      	adds	r0, #4
 8002412:	f7ff fe8b 	bl	800212c <XcpGetOrderedLong>
 8002416:	4601      	mov	r1, r0
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 8002418:	4620      	mov	r0, r4
 800241a:	f7ff fcdd 	bl	8001dd8 <NvmErase>
 800241e:	b130      	cbz	r0, 800242e <XcpCmdProgramClear+0x26>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <XcpCmdProgramClear+0x30>)
 8002422:	22ff      	movs	r2, #255	; 0xff
 8002424:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoLen = 1;
 8002426:	2201      	movs	r2, #1
 8002428:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramClear ***/
 800242c:	bd10      	pop	{r4, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 800242e:	2031      	movs	r0, #49	; 0x31
 8002430:	f7ff fe72 	bl	8002118 <XcpSetCtoError>
    return;
 8002434:	e7fa      	b.n	800242c <XcpCmdProgramClear+0x24>
 8002436:	bf00      	nop
 8002438:	2000060c 	.word	0x2000060c

0800243c <XcpCmdProgramReset>:
{
 800243c:	b508      	push	{r3, lr}
  CpuStartUserProgram();
 800243e:	f7ff f939 	bl	80016b4 <CpuStartUserProgram>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002442:	4b03      	ldr	r3, [pc, #12]	; (8002450 <XcpCmdProgramReset+0x14>)
 8002444:	22ff      	movs	r2, #255	; 0xff
 8002446:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoLen = 1;
 8002448:	2201      	movs	r2, #1
 800244a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramReset ***/
 800244e:	bd08      	pop	{r3, pc}
 8002450:	2000060c 	.word	0x2000060c

08002454 <XcpTransmitPacket>:
{
 8002454:	b508      	push	{r3, lr}
  ComTransmitPacket(data, len);
 8002456:	b289      	uxth	r1, r1
 8002458:	f7ff fde2 	bl	8002020 <ComTransmitPacket>
} /*** end of XcpTransmitPacket ***/
 800245c:	bd08      	pop	{r3, pc}
	...

08002460 <XcpInit>:
  xcpInfo.connected = 0;
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <XcpInit+0x20>)
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  xcpInfo.mta = 0;
 8002468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  xcpInfo.ctoPending = 0;
 800246c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  xcpInfo.ctoLen = 0;
 8002470:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  xcpInfo.s_n_k_resource = 0;
 8002474:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  xcpInfo.protection = 0;
 8002478:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
} /*** end of XcpInit ***/
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2000060c 	.word	0x2000060c

08002484 <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 8002484:	4b02      	ldr	r3, [pc, #8]	; (8002490 <XcpIsConnected+0xc>)
 8002486:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
 800248a:	b100      	cbz	r0, 800248e <XcpIsConnected+0xa>
  return BLT_TRUE;
 800248c:	2001      	movs	r0, #1
} /*** end of XcpIsConnected ***/
 800248e:	4770      	bx	lr
 8002490:	2000060c 	.word	0x2000060c

08002494 <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <XcpPacketTransmitted+0xc>)
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
} /*** end of XcpPacketTransmitted ***/
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	2000060c 	.word	0x2000060c

080024a4 <XcpPacketReceived>:
{
 80024a4:	b508      	push	{r3, lr}
  if (data[0] == XCP_CMD_CONNECT)
 80024a6:	7803      	ldrb	r3, [r0, #0]
 80024a8:	2bff      	cmp	r3, #255	; 0xff
 80024aa:	d024      	beq.n	80024f6 <XcpPacketReceived+0x52>
  else if (xcpInfo.connected == 1)
 80024ac:	4a35      	ldr	r2, [pc, #212]	; (8002584 <XcpPacketReceived+0xe0>)
 80024ae:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 80024b2:	2a01      	cmp	r2, #1
 80024b4:	d12b      	bne.n	800250e <XcpPacketReceived+0x6a>
    switch (data[0])
 80024b6:	3bc9      	subs	r3, #201	; 0xc9
 80024b8:	2b35      	cmp	r3, #53	; 0x35
 80024ba:	d853      	bhi.n	8002564 <XcpPacketReceived+0xc0>
 80024bc:	e8df f003 	tbb	[pc, r3]
 80024c0:	4f525240 	.word	0x4f525240
 80024c4:	434c5252 	.word	0x434c5252
 80024c8:	52524649 	.word	0x52524649
 80024cc:	52525252 	.word	0x52525252
 80024d0:	52525252 	.word	0x52525252
 80024d4:	52525252 	.word	0x52525252
 80024d8:	52525252 	.word	0x52525252
 80024dc:	52525252 	.word	0x52525252
 80024e0:	52525252 	.word	0x52525252
 80024e4:	52525252 	.word	0x52525252
 80024e8:	2b315252 	.word	0x2b315252
 80024ec:	52522e28 	.word	0x52522e28
 80024f0:	37523452 	.word	0x37523452
 80024f4:	3d3a      	.short	0x3d3a
    XcpCmdConnect(data);
 80024f6:	f7ff fe99 	bl	800222c <XcpCmdConnect>
  if (xcpInfo.ctoPending == 1)
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <XcpPacketReceived+0xe0>)
 80024fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002500:	2b01      	cmp	r3, #1
 8002502:	d033      	beq.n	800256c <XcpPacketReceived+0xc8>
  if (xcpInfo.ctoLen > 0)
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <XcpPacketReceived+0xe0>)
 8002506:	f9b3 1086 	ldrsh.w	r1, [r3, #134]	; 0x86
 800250a:	2900      	cmp	r1, #0
 800250c:	dc32      	bgt.n	8002574 <XcpPacketReceived+0xd0>
} /*** end of XcpPacketReceived ***/
 800250e:	bd08      	pop	{r3, pc}
        XcpCmdUpload(data);
 8002510:	f7ff feb0 	bl	8002274 <XcpCmdUpload>
        break;
 8002514:	e7f1      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdShortUpload(data);
 8002516:	f7ff fecd 	bl	80022b4 <XcpCmdShortUpload>
        break;
 800251a:	e7ee      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdSetMta(data);
 800251c:	f7ff fe5c 	bl	80021d8 <XcpCmdSetMta>
        break;
 8002520:	e7eb      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdBuildCheckSum(data);
 8002522:	f7ff feff 	bl	8002324 <XcpCmdBuildCheckSum>
        break;
 8002526:	e7e8      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdGetId(data);
 8002528:	f7ff fe3e 	bl	80021a8 <XcpCmdGetId>
        break;
 800252c:	e7e5      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdSynch(data);
 800252e:	f7ff fe35 	bl	800219c <XcpCmdSynch>
        break;
 8002532:	e7e2      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdGetStatus(data);
 8002534:	f7ff fe20 	bl	8002178 <XcpCmdGetStatus>
        break;
 8002538:	e7df      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdDisconnect(data);
 800253a:	f7ff fe0d 	bl	8002158 <XcpCmdDisconnect>
        break;
 800253e:	e7dc      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdProgramMax(data);
 8002540:	f7ff ff0e 	bl	8002360 <XcpCmdProgramMax>
        break;
 8002544:	e7d9      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdProgram(data);
 8002546:	f7ff ff2d 	bl	80023a4 <XcpCmdProgram>
        break;
 800254a:	e7d6      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdProgramStart(data);
 800254c:	f7ff fe5a 	bl	8002204 <XcpCmdProgramStart>
        break;
 8002550:	e7d3      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdProgramClear(data);
 8002552:	f7ff ff59 	bl	8002408 <XcpCmdProgramClear>
        break;
 8002556:	e7d0      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdProgramReset(data);
 8002558:	f7ff ff70 	bl	800243c <XcpCmdProgramReset>
        break;
 800255c:	e7cd      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpCmdProgramPrepare(data);
 800255e:	f7ff fe4b 	bl	80021f8 <XcpCmdProgramPrepare>
        break;
 8002562:	e7ca      	b.n	80024fa <XcpPacketReceived+0x56>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8002564:	2020      	movs	r0, #32
 8002566:	f7ff fdd7 	bl	8002118 <XcpSetCtoError>
        break;
 800256a:	e7c6      	b.n	80024fa <XcpPacketReceived+0x56>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 800256c:	2010      	movs	r0, #16
 800256e:	f7ff fdd3 	bl	8002118 <XcpSetCtoError>
 8002572:	e7c7      	b.n	8002504 <XcpPacketReceived+0x60>
    xcpInfo.ctoPending = 1;
 8002574:	4618      	mov	r0, r3
 8002576:	2301      	movs	r3, #1
 8002578:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 800257c:	f7ff ff6a 	bl	8002454 <XcpTransmitPacket>
 8002580:	e7c5      	b.n	800250e <XcpPacketReceived+0x6a>
 8002582:	bf00      	nop
 8002584:	2000060c 	.word	0x2000060c

08002588 <__libc_init_array>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	4d0d      	ldr	r5, [pc, #52]	; (80025c0 <__libc_init_array+0x38>)
 800258c:	4c0d      	ldr	r4, [pc, #52]	; (80025c4 <__libc_init_array+0x3c>)
 800258e:	1b64      	subs	r4, r4, r5
 8002590:	10a4      	asrs	r4, r4, #2
 8002592:	2600      	movs	r6, #0
 8002594:	42a6      	cmp	r6, r4
 8002596:	d109      	bne.n	80025ac <__libc_init_array+0x24>
 8002598:	4d0b      	ldr	r5, [pc, #44]	; (80025c8 <__libc_init_array+0x40>)
 800259a:	4c0c      	ldr	r4, [pc, #48]	; (80025cc <__libc_init_array+0x44>)
 800259c:	f000 f818 	bl	80025d0 <_init>
 80025a0:	1b64      	subs	r4, r4, r5
 80025a2:	10a4      	asrs	r4, r4, #2
 80025a4:	2600      	movs	r6, #0
 80025a6:	42a6      	cmp	r6, r4
 80025a8:	d105      	bne.n	80025b6 <__libc_init_array+0x2e>
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b0:	4798      	blx	r3
 80025b2:	3601      	adds	r6, #1
 80025b4:	e7ee      	b.n	8002594 <__libc_init_array+0xc>
 80025b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ba:	4798      	blx	r3
 80025bc:	3601      	adds	r6, #1
 80025be:	e7f2      	b.n	80025a6 <__libc_init_array+0x1e>
 80025c0:	080028dc 	.word	0x080028dc
 80025c4:	080028dc 	.word	0x080028dc
 80025c8:	080028dc 	.word	0x080028dc
 80025cc:	080028e0 	.word	0x080028e0

080025d0 <_init>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	bf00      	nop
 80025d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d6:	bc08      	pop	{r3}
 80025d8:	469e      	mov	lr, r3
 80025da:	4770      	bx	lr

080025dc <_fini>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	bf00      	nop
 80025e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e2:	bc08      	pop	{r3}
 80025e4:	469e      	mov	lr, r3
 80025e6:	4770      	bx	lr
